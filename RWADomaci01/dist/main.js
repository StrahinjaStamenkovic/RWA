(()=>{"use strict";var e=function(){function e(e){this.arr=[],this.baseline=e}return e.prototype.addCrypto=function(e){return this.arr.push(e)},e.prototype.getElements=function(){return this.arr},e.prototype.draw=function(e){var t=this;if(null===e)throw new Error("Container value is not set or is null.");var n=document.createElement("table");e.appendChild(n),this.container=n;var r=["Cryptocurrency","Abbreviation","Value (USD)","Value ("+this.baseline.getAbbreviation()+")"],i=document.createElement("thead");n.appendChild(i);var a=document.createElement("tr");i.appendChild(a),r.forEach((function(e){var t=document.createElement("th");t.innerHTML=e,a.appendChild(t)}));var o=document.createElement("tbody");return n.appendChild(o),this.arr.forEach((function(e){var n=document.createElement("tr");o.appendChild(n),e.draw(n);var r=document.getElementById("PriceBaseline"+e.getAbbreviation()),i=e.convertTo(t.baseline).toPrecision(6);r.innerHTML=i+" "+t.baseline.getAbbreviation()})),!0},e.prototype.getContainer=function(){return this.container},e.prototype.changeBaseline=function(e){return this.baseline=e,!0},e}(),t=function(){function e(e,t,n){this.name=e,this.abbreviation=t,this.priceUSD=n}return e.prototype.getPriceUSD=function(){return this.priceUSD},e.prototype.getName=function(){return this.name},e.prototype.getAbbreviation=function(){return this.abbreviation},e.prototype.displayInfo=function(){return"Crypto name: "+this.name+",  Abbreviation: "+this.abbreviation+", Price in USD: $"+this.priceUSD+"."},e.prototype.convertTo=function(e){return this.priceUSD/e.getPriceUSD()},e.prototype.draw=function(e){var t=this;if(null===e)throw new Error("Container value is not set or is null.");this.container=e;var n=["Cryotocurrency","Abbreviation","PriceUSD","PriceBaseline"];return n.forEach((function(e,r){var i=document.createElement("td");switch(t.container.appendChild(i),r){case 0:(a=document.createElement("a")).setAttribute("href","https://coinmarketcap.com/currencies/"+t.name+"/"),a.setAttribute("target","_blank"),i.appendChild(a),a.innerHTML=t.name;break;case 1:var a;(a=document.createElement("a")).setAttribute("href","https://coinmarketcap.com/currencies/"+t.name+"/"),a.setAttribute("target","_blank"),i.appendChild(a),a.innerHTML=t.abbreviation;break;case 2:i.innerHTML="$"+t.priceUSD;break;default:i.innerHTML=" "}i.setAttribute("id",""+n[r]+t.abbreviation)})),!0},e}(),n=new t("Bitcoin","BTC",62e3),r=new t("Ethereum","ETH",2e3),i=new t("Ravencoin","RVN",.2),a=new t("Cardano","ADA",1.2),o=new t("Tether","USDT",1),c=new e(n);c.addCrypto(n),c.addCrypto(r),c.addCrypto(i),c.addCrypto(a),c.addCrypto(o);var u=document.createElement("div");document.body.appendChild(u),c.draw(u);var d=document.createElement("div");document.body.appendChild(d),d.setAttribute("id","divSelect");var p=document.createElement("label");p.setAttribute("for","cryptocurrency"),p.innerHTML="Choose a crypto:",d.appendChild(p);var s=document.createElement("select");s.setAttribute("name","cryptocurrency"),s.setAttribute("name","cryptocurrencyid"),d.appendChild(s);var l=c.getElements();l.forEach((function(e){var t=document.createElement("option");t.setAttribute("value",e.getAbbreviation()),t.innerHTML=e.getAbbreviation(),s.appendChild(t)})),s.onchange=function(){var e=s.value,t=l.find((function(t){return t.getAbbreviation()==e}));c.changeBaseline(t),c.getContainer().remove(),c.draw(u)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yd2Fkb21hY2kwMS8uL3NyYy90YWJsZS50cyIsIndlYnBhY2s6Ly9yd2Fkb21hY2kwMS8uL3NyYy9jcnlwdG8udHMiLCJ3ZWJwYWNrOi8vcndhZG9tYWNpMDEvLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsiVGFibGUiLCJiYXNlbGluZSIsInRoaXMiLCJhcnIiLCJwcm90b3R5cGUiLCJhZGRDcnlwdG8iLCJzb21lQ3J5cHRvIiwicHVzaCIsImdldEVsZW1lbnRzIiwiZHJhdyIsImNvbnRhaW5lciIsIl90aGlzIiwiRXJyb3IiLCJ0YWJsZUNvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiaGVhZGVycyIsImdldEFiYnJldmlhdGlvbiIsInRoZWFkIiwidHJfMSIsImZvckVhY2giLCJwIiwidGgiLCJpbm5lckhUTUwiLCJ0Ym9keV8xIiwidHIiLCJjZWxsQmFzZWxpbmUiLCJnZXRFbGVtZW50QnlJZCIsIm51bSIsImNvbnZlcnRUbyIsInRvUHJlY2lzaW9uIiwiZ2V0Q29udGFpbmVyIiwiY2hhbmdlQmFzZWxpbmUiLCJDcnlwdG8iLCJuYW1lIiwiYWJicmV2aWF0aW9uIiwicHJpY2VVU0QiLCJnZXRQcmljZVVTRCIsImdldE5hbWUiLCJkaXNwbGF5SW5mbyIsIm5hbWVzXzEiLCJpIiwidGQiLCJsaW5rIiwic2V0QXR0cmlidXRlIiwiYnRjIiwiZXRoIiwicnZuIiwiYWRhIiwidXNkdCIsInRhYmxlIiwiZGl2IiwiYm9keSIsImRpdlNlbGVjdCIsImxhYmVsIiwib3B0aW9uIiwib25jaGFuZ2UiLCJjcnlwdG8iLCJ2YWx1ZSIsImNyeXB0b09iaiIsImZpbmQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiJtQkFBQSxJQUFJQSxFQUF1QixXQUN2QixTQUFTQSxFQUFNQyxHQUNYQyxLQUFLQyxJQUFNLEdBQ1hELEtBQUtELFNBQVdBLEVBOENwQixPQTVDQUQsRUFBTUksVUFBVUMsVUFBWSxTQUFVQyxH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R0FDbEIsSUFBSWtDLEVBQVMxQyxTQUFTQyxjQUFjLFVBQ3BDeUMsRUFBT1gsYUFBYSxRQUFTdkIsRUFBRUosbUJBQy9Cc0MsRUFBT2hDLFVBQVlGLEVBQUVKLGtCQUNyQixFQUFPRixZQUFZd0MsTUFFdkIsRUFBT0MsU0FBVyxXQUNkLElBQUlDLEVBQVMsRUFBT0MsTUFDaEJDLEVBQVl6RCxFQUFJMEQsTUFBSyxTQUFVdkMsR0FBSyxPQUFPQSxFQUFFSixtQkFBcUJ3QyxLQUN0RVAsRUFBTWxCLGVBQWUyQixHQUNyQlQsRUFBTW5CLGVBQWU4QixTQUNyQlgsRUFBTTFDLEtBQUsyQyxLIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUYWJsZShiYXNlbGluZSkge1xyXG4gICAgICAgIHRoaXMuYXJyID0gW107XHJcbiAgICAgICAgdGhpcy5iYXNlbGluZSA9IGJhc2VsaW5lO1xyXG4gICAgfVxyXG4gICAgVGFibGUucHJvdG90eXBlLmFkZENyeXB0byA9IGZ1bmN0aW9uIChzb21lQ3J5cHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyLnB1c2goc29tZUNyeXB0byk7XHJcbiAgICB9O1xyXG4gICAgVGFibGUucHJvdG90eXBlLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFycjtcclxuICAgIH07XHJcbiAgICBUYWJsZS5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChjb250YWluZXIgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRhaW5lciB2YWx1ZSBpcyBub3Qgc2V0IG9yIGlzIG51bGwuXCIpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdGFibGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YWJsZUNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gdGFibGVDb250YWluZXI7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJzID0gW1wiQ3J5cHRvY3VycmVuY3lcIiwgXCJBYmJyZXZpYXRpb25cIiwgXCJWYWx1ZSAoVVNEKVwiLCBcIlZhbHVlIChcIiArIHRoaXMuYmFzZWxpbmUuZ2V0QWJicmV2aWF0aW9uKCkgKyBcIilcIl07XHJcbiAgICAgICAgICAgIHZhciB0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICAgICAgdGFibGVDb250YWluZXIuYXBwZW5kQ2hpbGQodGhlYWQpO1xyXG4gICAgICAgICAgICB2YXIgdHJfMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgICAgICAgdGhlYWQuYXBwZW5kQ2hpbGQodHJfMSk7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG4gICAgICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gcDtcclxuICAgICAgICAgICAgICAgIHRyXzEuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIHRib2R5XzEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIik7XHJcbiAgICAgICAgICAgIHRhYmxlQ29udGFpbmVyLmFwcGVuZENoaWxkKHRib2R5XzEpO1xyXG4gICAgICAgICAgICB0aGlzLmFyci5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XHJcbiAgICAgICAgICAgICAgICB0Ym9keV8xLmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICAgICAgICAgIHAuZHJhdyh0cik7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbEJhc2VsaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJQcmljZUJhc2VsaW5lXCIgKyBwLmdldEFiYnJldmlhdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIHZhciBudW0gPSBwLmNvbnZlcnRUbyhfdGhpcy5iYXNlbGluZSkudG9QcmVjaXNpb24oNik7XHJcbiAgICAgICAgICAgICAgICBjZWxsQmFzZWxpbmUuaW5uZXJIVE1MID0gbnVtICsgXCIgXCIgKyBfdGhpcy5iYXNlbGluZS5nZXRBYmJyZXZpYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUYWJsZS5wcm90b3R5cGUuZ2V0Q29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcclxuICAgIH07XHJcbiAgICBUYWJsZS5wcm90b3R5cGUuY2hhbmdlQmFzZWxpbmUgPSBmdW5jdGlvbiAoYmFzZWxpbmUpIHtcclxuICAgICAgICB0aGlzLmJhc2VsaW5lID0gYmFzZWxpbmU7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRhYmxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBUYWJsZSB9O1xyXG4iLCJ2YXIgQ3J5cHRvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ3J5cHRvKG5hbWUsIGFiYnJldmlhdGlvbiwgcHJpY2VVU0QpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuYWJicmV2aWF0aW9uID0gYWJicmV2aWF0aW9uO1xyXG4gICAgICAgIHRoaXMucHJpY2VVU0QgPSBwcmljZVVTRDtcclxuICAgIH1cclxuICAgIENyeXB0by5wcm90b3R5cGUuZ2V0UHJpY2VVU0QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpY2VVU0Q7XHJcbiAgICB9O1xyXG4gICAgQ3J5cHRvLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9O1xyXG4gICAgQ3J5cHRvLnByb3RvdHlwZS5nZXRBYmJyZXZpYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWJicmV2aWF0aW9uO1xyXG4gICAgfTtcclxuICAgIENyeXB0by5wcm90b3R5cGUuZGlzcGxheUluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiQ3J5cHRvIG5hbWU6IFwiICsgdGhpcy5uYW1lICsgXCIsICBBYmJyZXZpYXRpb246IFwiICsgdGhpcy5hYmJyZXZpYXRpb24gKyBcIiwgUHJpY2UgaW4gVVNEOiAkXCIgKyB0aGlzLnByaWNlVVNEICsgXCIuXCI7XHJcbiAgICB9O1xyXG4gICAgQ3J5cHRvLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiAoc29tZUNyeXB0bykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByaWNlVVNEIC8gc29tZUNyeXB0by5nZXRQcmljZVVTRCgpO1xyXG4gICAgfTtcclxuICAgIENyeXB0by5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChjb250YWluZXIgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRhaW5lciB2YWx1ZSBpcyBub3Qgc2V0IG9yIGlzIG51bGwuXCIpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgdmFyIG5hbWVzXzEgPSBbXCJDcnlvdG9jdXJyZW5jeVwiLCBcIkFiYnJldmlhdGlvblwiLCBcIlByaWNlVVNEXCIsIFwiUHJpY2VCYXNlbGluZVwiXTtcclxuICAgICAgICAgICAgbmFtZXNfMS5mb3JFYWNoKGZ1bmN0aW9uIChwLCBpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGQpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcImh0dHBzOi8vY29pbm1hcmtldGNhcC5jb20vY3VycmVuY2llcy9cIiArIF90aGlzLm5hbWUgKyBcIi9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsIFwiX2JsYW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluay5pbm5lckhUTUwgPSBfdGhpcy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcImh0dHBzOi8vY29pbm1hcmtldGNhcC5jb20vY3VycmVuY2llcy9cIiArIF90aGlzLm5hbWUgKyBcIi9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsIFwiX2JsYW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluay5pbm5lckhUTUwgPSBfdGhpcy5hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGQuaW5uZXJIVE1MID0gXCIkXCIgKyBfdGhpcy5wcmljZVVTRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGQuaW5uZXJIVE1MID0gXCIgXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRkLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiXCIgKyBuYW1lc18xW2ldICsgX3RoaXMuYWJicmV2aWF0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQ3J5cHRvO1xyXG59KCkpO1xyXG5leHBvcnQgeyBDcnlwdG8gfTtcclxuIiwiaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiLi90YWJsZVwiO1xyXG5pbXBvcnQgeyBDcnlwdG8gfSBmcm9tIFwiLi9jcnlwdG9cIjtcclxudmFyIGJ0YyA9IG5ldyBDcnlwdG8oXCJCaXRjb2luXCIsIFwiQlRDXCIsIDYyMDAwKTtcclxudmFyIGV0aCA9IG5ldyBDcnlwdG8oXCJFdGhlcmV1bVwiLCBcIkVUSFwiLCAyMDAwKTtcclxudmFyIHJ2biA9IG5ldyBDcnlwdG8oXCJSYXZlbmNvaW5cIiwgXCJSVk5cIiwgMC4yMCk7XHJcbnZhciBhZGEgPSBuZXcgQ3J5cHRvKFwiQ2FyZGFub1wiLCBcIkFEQVwiLCAxLjIwKTtcclxudmFyIHVzZHQgPSBuZXcgQ3J5cHRvKFwiVGV0aGVyXCIsIFwiVVNEVFwiLCAxKTtcclxudmFyIHRhYmxlID0gbmV3IFRhYmxlKGJ0Yyk7XHJcbnRhYmxlLmFkZENyeXB0byhidGMpO1xyXG50YWJsZS5hZGRDcnlwdG8oZXRoKTtcclxudGFibGUuYWRkQ3J5cHRvKHJ2bik7XHJcbnRhYmxlLmFkZENyeXB0byhhZGEpO1xyXG50YWJsZS5hZGRDcnlwdG8odXNkdCk7XHJcbnZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XHJcbnRhYmxlLmRyYXcoZGl2KTtcclxudmFyIGRpdlNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2U2VsZWN0KTtcclxuZGl2U2VsZWN0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZGl2U2VsZWN0XCIpO1xyXG52YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbmxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImNyeXB0b2N1cnJlbmN5XCIpO1xyXG5sYWJlbC5pbm5lckhUTUwgPSBcIkNob29zZSBhIGNyeXB0bzpcIjtcclxuZGl2U2VsZWN0LmFwcGVuZENoaWxkKGxhYmVsKTtcclxudmFyIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbnNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwiY3J5cHRvY3VycmVuY3lcIik7XHJcbnNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwiY3J5cHRvY3VycmVuY3lpZFwiKTtcclxuZGl2U2VsZWN0LmFwcGVuZENoaWxkKHNlbGVjdCk7XHJcbnZhciBhcnIgPSB0YWJsZS5nZXRFbGVtZW50cygpO1xyXG5hcnIuZm9yRWFjaChmdW5jdGlvbiAocCkge1xyXG4gICAgdmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgcC5nZXRBYmJyZXZpYXRpb24oKSk7XHJcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gcC5nZXRBYmJyZXZpYXRpb24oKTtcclxuICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG59KTtcclxuc2VsZWN0Lm9uY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGNyeXB0byA9IHNlbGVjdC52YWx1ZTtcclxuICAgIHZhciBjcnlwdG9PYmogPSBhcnIuZmluZChmdW5jdGlvbiAocCkgeyByZXR1cm4gcC5nZXRBYmJyZXZpYXRpb24oKSA9PSBjcnlwdG87IH0pO1xyXG4gICAgdGFibGUuY2hhbmdlQmFzZWxpbmUoY3J5cHRvT2JqKTtcclxuICAgIHRhYmxlLmdldENvbnRhaW5lcigpLnJlbW92ZSgpO1xyXG4gICAgdGFibGUuZHJhdyhkaXYpO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9