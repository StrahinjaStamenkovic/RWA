(()=>{"use strict";var e={3152:(e,t,r)=>{var n=r(2837);t.y$=n.Observable,r(8448).ConnectableObservable,r(2624).GroupedObservable,r(6079).observable;var o=r(4144);t.xQ=o.Subject,r(2859).BehaviorSubject,r(3904).ReplaySubject,r(8938).AsyncSubject;var i=r(2265);i.asap,i.asapScheduler;var s=r(2842);s.async,s.asyncScheduler;var u=r(5949);u.queue,u.queueScheduler;var c=r(1440);c.animationFrame,c.animationFrameScheduler;var a=r(1669);a.VirtualTimeScheduler,a.VirtualAction,r(2785).Scheduler,r(598).Subscription,r(9454).Subscriber;var l=r(5362);l.Notification,l.NotificationKind,r(8105).pipe,r(1543).noop,r(141).identity,r(135).isObservable,r(874).ArgumentOutOfRangeError,r(7811).EmptyError,r(3117).ObjectUnsubscribedError,r(3305).UnsubscriptionError,r(9300).TimeoutError,r(8406).bindCallback,r(1997).bindNodeCallback,r(8313).combineLatest,r(7501).concat,r(255).defer,r(2684).empty,r(2146).forkJoin,r(601).from;var h=r(2556);t.RB=h.fromEvent,r(5686).fromEventPattern,r(4215).generate,r(7596).iif;var p=r(5126);t.FG=p.interval,r(5542).merge,r(7675).never,r(6102).of,r(4278).onErrorResumeNext,r(6908).pairs,r(733).partition,r(4710).race,r(970).range,r(6525).throwError,r(6170).timer,r(9789).using,r(8587).zip,r(5432).scheduled,r(2684).EMPTY,r(7675).NEVER,r(9079).config},8938:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(4144),s=r(598),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.value=null,t.hasNext=!1,t.hasCompleted=!1,t}return o(t,e),t.prototype._subscribe=function(t){return this.hasError?(t.error(this.thrownError),s.Subscription.EMPTY):this.hasCompleted&&this.hasNext?(t.next(this.value),t.complete(),s.Subscription.EMPTY):e.prototype._subscribe.call(this,t)},t.prototype.next=function(e){this.hasCompleted||(this.value=e,this.hasNext=!0)},t.prototype.error=function(t){this.hasCompleted||e.prototype.error.call(this,t)},t.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&e.prototype.next.call(this,this.value),e.prototype.complete.call(this)},t}(i.Subject);t.AsyncSubject=u},2859:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(4144),s=r(3117),u=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return o(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return r&&!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new s.ObjectUnsubscribedError;return this._value},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(i.Subject);t.BehaviorSubject=u},3848:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r,n){var o=e.call(this)||this;return o.parent=t,o.outerValue=r,o.outerIndex=n,o.index=0,o}return o(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(r(9454).Subscriber);t.InnerSubscriber=i},5362:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n,o=r(2684),i=r(6102),s=r(6525);(n=t.NotificationKind||(t.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var u=function(){function e(e,t,r){this.kind=e,this.value=t,this.error=r,this.hasValue="N"===e}return e.prototype.observe=function(e){switch(this.kind){case"N":return e.next&&e.next(this.value);case"E":return e.error&&e.error(this.error);case"C":return e.complete&&e.complete()}},e.prototype.do=function(e,t,r){switch(this.kind){case"N":return e&&e(this.value);case"E":return t&&t(this.error);case"C":return r&&r()}},e.prototype.accept=function(e,t,r){return e&&"function"==typeof e.next?this.observe(e):this.do(e,t,r)},e.prototype.toObservable=function(){switch(this.kind){case"N":return i.of(this.value);case"E":return s.throwError(this.error);case"C":return o.empty()}throw new Error("unexpected notification kind value")},e.createNext=function(t){return void 0!==t?new e("N",t):e.undefinedValueNotification},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e.undefinedValueNotification=new e("N",void 0),e}();t.Notification=u},2837:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(7481),o=r(3123),i=r(6079),s=r(8105),u=r(9079),c=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n=this.operator,i=o.toSubscriber(e,t,r);if(n?i.add(n.call(i,this.source)):i.add(this.source||u.config.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.config.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){u.config.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),n.canReportError(e)?e.error(t):console.warn(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=a(t))((function(t,n){var o;o=r.subscribe((function(t){try{e(t)}catch(e){n(e),o&&o.unsubscribe()}}),n,t)}))},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:s.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=a(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function a(e){if(e||(e=u.config.Promise||Promise),!e)throw new Error("no Promise impl found");return e}t.Observable=c},4556:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(9079),o=r(9219);t.empty={closed:!0,next:function(e){},error:function(e){if(n.config.useDeprecatedSynchronousErrorHandling)throw e;o.hostReportError(e)},complete:function(){}}},9455:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.notifyNext=function(e,t,r,n,o){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(r(9454).Subscriber);t.OuterSubscriber=i},3904:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(4144),s=r(5949),u=r(598),c=r(3396),a=r(3117),l=r(1585),h=function(e){function t(t,r,n){void 0===t&&(t=Number.POSITIVE_INFINITY),void 0===r&&(r=Number.POSITIVE_INFINITY);var o=e.call(this)||this;return o.scheduler=n,o._events=[],o._infiniteTimeWindow=!1,o._bufferSize=t<1?1:t,o._windowTime=r<1?1:r,r===Number.POSITIVE_INFINITY?(o._infiniteTimeWindow=!0,o.next=o.nextInfiniteTimeWindow):o.next=o.nextTimeWindow,o}return o(t,e),t.prototype.nextInfiniteTimeWindow=function(t){if(!this.isStopped){var r=this._events;r.push(t),r.length>this._bufferSize&&r.shift()}e.prototype.next.call(this,t)},t.prototype.nextTimeWindow=function(t){this.isStopped||(this._events.push(new p(this._getNow(),t)),this._trimBufferThenGetEvents()),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){var t,r=this._infiniteTimeWindow,n=r?this._events:this._trimBufferThenGetEvents(),o=this.scheduler,i=n.length;if(this.closed)throw new a.ObjectUnsubscribedError;if(this.isStopped||this.hasError?t=u.Subscription.EMPTY:(this.observers.push(e),t=new l.SubjectSubscription(this,e)),o&&e.add(e=new c.ObserveOnSubscriber(e,o)),r)for(var s=0;s<i&&!e.closed;s++)e.next(n[s]);else for(s=0;s<i&&!e.closed;s++)e.next(n[s].value);return this.hasError?e.error(this.thrownError):this.isStopped&&e.complete(),t},t.prototype._getNow=function(){return(this.scheduler||s.queue).now()},t.prototype._trimBufferThenGetEvents=function(){for(var e=this._getNow(),t=this._bufferSize,r=this._windowTime,n=this._events,o=n.length,i=0;i<o&&!(e-n[i].time<r);)i++;return o>t&&(i=Math.max(i,o-t)),i>0&&n.splice(0,i),n},t}(i.Subject);t.ReplaySubject=h;var p=function(e,t){this.time=e,this.value=t}},2785:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t,r){void 0===r&&(r=e.now),this.SchedulerAction=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(r,t)},e.now=function(){return Date.now()},e}();t.Scheduler=r},4144:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(2837),s=r(9454),u=r(598),c=r(3117),a=r(1585),l=r(3188),h=function(e){function t(t){var r=e.call(this,t)||this;return r.destination=t,r}return o(t,e),t}(s.Subscriber);t.SubjectSubscriber=h;var p=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype[l.rxSubscriber]=function(){return new h(this)},t.prototype.lift=function(e){var t=new f(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new c.ObjectUnsubscribedError;if(!this.isStopped)for(var t=this.observers,r=t.length,n=t.slice(),o=0;o<r;o++)n[o].next(e)},t.prototype.error=function(e){if(this.closed)throw new c.ObjectUnsubscribedError;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,r=t.length,n=t.slice(),o=0;o<r;o++)n[o].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new c.ObjectUnsubscribedError;this.isStopped=!0;for(var e=this.observers,t=e.length,r=e.slice(),n=0;n<t;n++)r[n].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new c.ObjectUnsubscribedError;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new c.ObjectUnsubscribedError;return this.hasError?(e.error(this.thrownError),u.Subscription.EMPTY):this.isStopped?(e.complete(),u.Subscription.EMPTY):(this.observers.push(e),new a.SubjectSubscription(this,e))},t.prototype.asObservable=function(){var e=new i.Observable;return e.source=this,e},t.create=function(e,t){return new f(e,t)},t}(i.Observable);t.Subject=p;var f=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return o(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):u.Subscription.EMPTY},t}(p);t.AnonymousSubject=f},1585:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r){var n=e.call(this)||this;return n.subject=t,n.subscriber=r,n.closed=!1,n}return o(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var r=t.indexOf(this.subscriber);-1!==r&&t.splice(r,1)}}},t}(r(598).Subscription);t.SubjectSubscription=i},9454:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1517),s=r(4556),u=r(598),c=r(3188),a=r(9079),l=r(9219),h=function(e){function t(r,n,o){var i=e.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=s.empty;break;case 1:if(!r){i.destination=s.empty;break}if("object"==typeof r){r instanceof t?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new p(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new p(i,r,n,o)}return i}return o(t,e),t.prototype[c.rxSubscriber]=function(){return this},t.create=function(e,r,n){var o=new t(e,r,n);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(u.Subscription);t.Subscriber=h;var p=function(e){function t(t,r,n,o){var u,c=e.call(this)||this;c._parentSubscriber=t;var a=c;return i.isFunction(r)?u=r:r&&(u=r.next,n=r.error,o=r.complete,r!==s.empty&&(a=Object.create(r),i.isFunction(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=u,c._error=n,c._complete=o,c}return o(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;a.config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,r=a.config.useDeprecatedSynchronousErrorHandling;if(this._error)r&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)r?(t.syncErrorValue=e,t.syncErrorThrown=!0):l.hostReportError(e),this.unsubscribe();else{if(this.unsubscribe(),r)throw e;l.hostReportError(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var r=function(){return e._complete.call(e._context)};a.config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),a.config.useDeprecatedSynchronousErrorHandling)throw e;l.hostReportError(e)}},t.prototype.__tryOrSetError=function(e,t,r){if(!a.config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,r)}catch(t){return a.config.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(l.hostReportError(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(h);t.SafeSubscriber=p},598:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(6835),o=r(7399),i=r(1517),s=r(3305),u=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}var t;return e.prototype.unsubscribe=function(){var t;if(!this.closed){var r=this,u=r._parentOrParents,a=r._ctorUnsubscribe,l=r._unsubscribe,h=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,u instanceof e)u.remove(this);else if(null!==u)for(var p=0;p<u.length;++p)u[p].remove(this);if(i.isFunction(l)){a&&(this._unsubscribe=void 0);try{l.call(this)}catch(e){t=e instanceof s.UnsubscriptionError?c(e.errors):[e]}}if(n.isArray(h)){p=-1;for(var f=h.length;++p<f;){var b=h[p];if(o.isObject(b))try{b.unsubscribe()}catch(e){t=t||[],e instanceof s.UnsubscriptionError?t=t.concat(c(e.errors)):t.push(e)}}}if(t)throw new s.UnsubscriptionError(t)}},e.prototype.add=function(t){var r=t;if(!t)return e.EMPTY;switch(typeof t){case"function":r=new e(t);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof e)){var n=r;(r=new e)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof e){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var r=t.indexOf(e);-1!==r&&t.splice(r,1)}},e.EMPTY=((t=new e).closed=!0,t),e}();function c(e){return e.reduce((function(e,t){return e.concat(t instanceof s.UnsubscriptionError?t.errors:t)}),[])}t.Subscription=u},9079:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=!1;t.config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){if(e){var t=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+t.stack)}else r&&console.log("RxJS: Back to a better error behavior. Thank you. <3");r=e},get useDeprecatedSynchronousErrorHandling(){return r}}},4387:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(9454),s=r(2837),u=r(3321),c=function(e){function t(t){var r=e.call(this)||this;return r.parent=t,r}return o(t,e),t.prototype._next=function(e){this.parent.notifyNext(e)},t.prototype._error=function(e){this.parent.notifyError(e),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},t}(i.Subscriber);t.SimpleInnerSubscriber=c;var a=function(e){function t(t,r,n){var o=e.call(this)||this;return o.parent=t,o.outerValue=r,o.outerIndex=n,o}return o(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this)},t.prototype._error=function(e){this.parent.notifyError(e),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(i.Subscriber);t.ComplexInnerSubscriber=a;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(){this.destination.complete()},t}(i.Subscriber);t.SimpleOuterSubscriber=l;var h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.notifyNext=function(e,t,r,n){this.destination.next(t)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(i.Subscriber);t.ComplexOuterSubscriber=h,t.innerSubscribe=function(e,t){if(!t.closed){if(e instanceof s.Observable)return e.subscribe(t);var r;try{r=u.subscribeTo(e)(t)}catch(e){t.error(e)}return r}}},8448:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i,s=r(4144),u=r(2837),c=r(9454),a=r(598),l=r(8295),h=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._refCount=0,n._isComplete=!1,n}return o(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new a.Subscription).add(this.source.subscribe(new p(this.getSubject(),this))),e.closed&&(this._connection=null,e=a.Subscription.EMPTY)),e},t.prototype.refCount=function(){return l.refCount()(this)},t}(u.Observable);t.ConnectableObservable=h,t.connectableObservableDescriptor={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:(i=h.prototype)._subscribe},_isComplete:{value:i._isComplete,writable:!0},getSubject:{value:i.getSubject},connect:{value:i.connect},refCount:{value:i.refCount}};var p=function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}return o(t,e),t.prototype._error=function(t){this._unsubscribe(),e.prototype._error.call(this,t)},t.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),e.prototype._complete.call(this)},t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}},t}(s.SubjectSubscriber);!function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}o(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var r=this.connection,n=e._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe()}}else this.connection=null}}(c.Subscriber)},8406:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(8938),i=r(8359),s=r(7481),u=r(6835),c=r(4503);function a(e){var t=this,r=e.args,n=e.subscriber,i=e.params,s=i.callbackFunc,u=i.context,c=i.scheduler,a=i.subject;if(!a){a=i.subject=new o.AsyncSubject;try{s.apply(u,r.concat([function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.length<=1?e[0]:e;t.add(c.schedule(l,0,{value:n,subject:a}))}]))}catch(e){a.error(e)}}this.add(a.subscribe(n))}function l(e){var t=e.value,r=e.subject;r.next(t),r.complete()}t.bindCallback=function e(t,r,l){if(r){if(!c.isScheduler(r))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(t,l).apply(void 0,n).pipe(i.map((function(e){return u.isArray(e)?r.apply(void 0,e):r(e)})))};l=r}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,u=this,c={context:u,subject:i,callbackFunc:t,scheduler:l};return new n.Observable((function(r){if(l){var n={args:e,subscriber:r,params:c};return l.schedule(a,0,n)}if(!i){i=new o.AsyncSubject;try{t.apply(u,e.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i.next(e.length<=1?e[0]:e),i.complete()}]))}catch(e){s.canReportError(i)?i.error(e):console.warn(e)}}return i.subscribe(r)}))}}},1997:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(8938),i=r(8359),s=r(7481),u=r(4503),c=r(6835);function a(e){var t=this,r=e.params,n=e.subscriber,i=e.context,s=r.callbackFunc,u=r.args,c=r.scheduler,a=r.subject;if(!a){a=r.subject=new o.AsyncSubject;try{s.apply(i,u.concat([function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.shift();if(n)t.add(c.schedule(h,0,{err:n,subject:a}));else{var o=e.length<=1?e[0]:e;t.add(c.schedule(l,0,{value:o,subject:a}))}}]))}catch(e){this.add(c.schedule(h,0,{err:e,subject:a}))}}this.add(a.subscribe(n))}function l(e){var t=e.value,r=e.subject;r.next(t),r.complete()}function h(e){var t=e.err;e.subject.error(t)}t.bindNodeCallback=function e(t,r,l){if(r){if(!u.isScheduler(r))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(t,l).apply(void 0,n).pipe(i.map((function(e){return c.isArray(e)?r.apply(void 0,e):r(e)})))};l=r}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:l,context:this};return new n.Observable((function(r){var n=i.context,u=i.subject;if(l)return l.schedule(a,0,{params:i,subscriber:r,context:n});if(!u){u=i.subject=new o.AsyncSubject;try{t.apply(n,e.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.shift();r?u.error(r):(u.next(e.length<=1?e[0]:e),u.complete())}]))}catch(e){s.canReportError(u)?u.error(e):console.warn(e)}}return u.subscribe(r)}))}}},8313:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(4503),s=r(6835),u=r(9455),c=r(6973),a=r(4176),l={};t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=void 0,n=void 0;return i.isScheduler(e[e.length-1])&&(n=e.pop()),"function"==typeof e[e.length-1]&&(r=e.pop()),1===e.length&&s.isArray(e[0])&&(e=e[0]),a.fromArray(e,n).lift(new h(r))};var h=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new p(e,this.resultSelector))},e}();t.CombineLatestOperator=h;var p=function(e){function t(t,r){var n=e.call(this,t)||this;return n.resultSelector=r,n.active=0,n.values=[],n.observables=[],n}return o(t,e),t.prototype._next=function(e){this.values.push(l),this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{this.active=t,this.toRespond=t;for(var r=0;r<t;r++){var n=e[r];this.add(c.subscribeToResult(this,n,void 0,r))}}},t.prototype.notifyComplete=function(e){0==(this.active-=1)&&this.destination.complete()},t.prototype.notifyNext=function(e,t,r){var n=this.values,o=n[r],i=this.toRespond?o===l?--this.toRespond:this.toRespond:0;n[r]=t,0===i&&(this.resultSelector?this._tryResultSelector(n):this.destination.next(n.slice()))},t.prototype._tryResultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(u.OuterSubscriber);t.CombineLatestSubscriber=p},7501:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(6102),o=r(192);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.concatAll()(n.of.apply(void 0,e))}},255:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(601),i=r(2684);t.defer=function(e){return new n.Observable((function(t){var r;try{r=e()}catch(e){return void t.error(e)}return(r?o.from(r):i.empty()).subscribe(t)}))}},2684:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837);t.EMPTY=new n.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new n.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},2146:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(6835),i=r(8359),s=r(7399),u=r(601);function c(e,t){return new n.Observable((function(r){var n=e.length;if(0!==n)for(var o=new Array(n),i=0,s=0,c=function(c){var a=u.from(e[c]),l=!1;r.add(a.subscribe({next:function(e){l||(l=!0,s++),o[c]=e},error:function(e){return r.error(e)},complete:function(){++i!==n&&l||(s===n&&r.next(t?t.reduce((function(e,t,r){return e[t]=o[r],e}),{}):o),r.complete())}}))},a=0;a<n;a++)c(a);else r.complete()}))}t.forkJoin=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){var r=e[0];if(o.isArray(r))return c(r,null);if(s.isObject(r)&&Object.getPrototypeOf(r)===Object.prototype){var n=Object.keys(r);return c(n.map((function(e){return r[e]})),n)}}if("function"==typeof e[e.length-1]){var u=e.pop();return c(e=1===e.length&&o.isArray(e[0])?e[0]:e,null).pipe(i.map((function(e){return u.apply(void 0,e)})))}return c(e,null)}},601:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(3321),i=r(5432);t.from=function(e,t){return t?i.scheduled(e,t):e instanceof n.Observable?e:new n.Observable(o.subscribeTo(e))}},4176:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(3196),i=r(140);t.fromArray=function(e,t){return t?i.scheduleArray(e,t):new n.Observable(o.subscribeToArray(e))}},2556:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(6835),i=r(1517),s=r(8359);function u(e,t,r,n,o){var i;if(function(e){return e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}(e)){var s=e;e.addEventListener(t,r,o),i=function(){return s.removeEventListener(t,r,o)}}else if(function(e){return e&&"function"==typeof e.on&&"function"==typeof e.off}(e)){var c=e;e.on(t,r),i=function(){return c.off(t,r)}}else if(function(e){return e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}(e)){var a=e;e.addListener(t,r),i=function(){return a.removeListener(t,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,h=e.length;l<h;l++)u(e[l],t,r,n,o)}n.add(i)}Object.prototype.toString,t.fromEvent=function e(t,r,c,a){return i.isFunction(c)&&(a=c,c=void 0),a?e(t,r,c).pipe(s.map((function(e){return o.isArray(e)?a.apply(void 0,e):a(e)}))):new n.Observable((function(e){u(t,r,(function(t){arguments.length>1?e.next(Array.prototype.slice.call(arguments)):e.next(t)}),e,c)}))}},5686:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(6835),i=r(1517),s=r(8359);t.fromEventPattern=function e(t,r,u){return u?e(t,r).pipe(s.map((function(e){return o.isArray(e)?u.apply(void 0,e):u(e)}))):new n.Observable((function(e){var n,o=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1===t.length?t[0]:t)};try{n=t(o)}catch(t){return void e.error(t)}if(i.isFunction(r))return function(){return r(o,n)}}))}},4215:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(141),i=r(4503);function s(e){var t=e.subscriber,r=e.condition;if(!t.closed){if(e.needIterate)try{e.state=e.iterate(e.state)}catch(e){return void t.error(e)}else e.needIterate=!0;if(r){var n=void 0;try{n=r(e.state)}catch(e){return void t.error(e)}if(!n)return void t.complete();if(t.closed)return}var o;try{o=e.resultSelector(e.state)}catch(e){return void t.error(e)}if(!t.closed&&(t.next(o),!t.closed))return this.schedule(e)}}t.generate=function(e,t,r,u,c){var a,l;if(1==arguments.length){var h=e;l=h.initialState,t=h.condition,r=h.iterate,a=h.resultSelector||o.identity,c=h.scheduler}else void 0===u||i.isScheduler(u)?(l=e,a=o.identity,c=u):(l=e,a=u);return new n.Observable((function(e){var n=l;if(c)return c.schedule(s,0,{subscriber:e,iterate:r,condition:t,resultSelector:a,state:n});for(;;){if(t){var o=void 0;try{o=t(n)}catch(t){return void e.error(t)}if(!o){e.complete();break}}var i=void 0;try{i=a(n)}catch(t){return void e.error(t)}if(e.next(i),e.closed)break;try{n=r(n)}catch(t){return void e.error(t)}}}))}},7596:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(255),o=r(2684);t.iif=function(e,t,r){return void 0===t&&(t=o.EMPTY),void 0===r&&(r=o.EMPTY),n.defer((function(){return e()?t:r}))}},5126:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(2842),i=r(3512);function s(e){var t=e.subscriber,r=e.counter,n=e.period;t.next(r),this.schedule({subscriber:t,counter:r+1,period:n},n)}t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=o.async),(!i.isNumeric(e)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=o.async),new n.Observable((function(r){return r.add(t.schedule(s,e,{subscriber:r,counter:0,period:e})),r}))}},5542:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(4503),i=r(2697),s=r(4176);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Number.POSITIVE_INFINITY,u=null,c=e[e.length-1];return o.isScheduler(c)?(u=e.pop(),e.length>1&&"number"==typeof e[e.length-1]&&(r=e.pop())):"number"==typeof c&&(r=e.pop()),null===u&&1===e.length&&e[0]instanceof n.Observable?e[0]:i.mergeAll(r)(s.fromArray(e,u))}},7675:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(1543);t.NEVER=new n.Observable(o.noop),t.never=function(){return t.NEVER}},6102:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(4503),o=r(4176),i=r(140);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[e.length-1];return n.isScheduler(r)?(e.pop(),i.scheduleArray(e,r)):o.fromArray(e)}},4278:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(601),i=r(6835),s=r(2684);t.onErrorResumeNext=function e(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(0===t.length)return s.EMPTY;var u=t[0],c=t.slice(1);return 1===t.length&&i.isArray(u)?e.apply(void 0,u):new n.Observable((function(t){var r=function(){return t.add(e.apply(void 0,c).subscribe(t))};return o.from(u).subscribe({next:function(e){t.next(e)},error:r,complete:r})}))}},6908:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(598);function i(e){var t=e.keys,r=e.index,n=e.subscriber,o=e.subscription,i=e.obj;if(!n.closed)if(r<t.length){var s=t[r];n.next([s,i[s]]),o.add(this.schedule({keys:t,index:r+1,subscriber:n,subscription:o,obj:i}))}else n.complete()}t.pairs=function(e,t){return t?new n.Observable((function(r){var n=Object.keys(e),s=new o.Subscription;return s.add(t.schedule(i,0,{keys:n,index:0,subscriber:r,subscription:s,obj:e})),s})):new n.Observable((function(t){for(var r=Object.keys(e),n=0;n<r.length&&!t.closed;n++){var o=r[n];e.hasOwnProperty(o)&&t.next([o,e[o]])}t.complete()}))},t.dispatch=i},733:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2052),o=r(3321),i=r(7224),s=r(2837);t.partition=function(e,t,r){return[i.filter(t,r)(new s.Observable(o.subscribeTo(e))),i.filter(n.not(t,r))(new s.Observable(o.subscribeTo(e)))]}},4710:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(6835),s=r(4176),u=r(9455),c=r(6973);t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){if(!i.isArray(e[0]))return e[0];e=e[0]}return s.fromArray(e,void 0).lift(new a)};var a=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new l(e))},e}();t.RaceOperator=a;var l=function(e){function t(t){var r=e.call(this,t)||this;return r.hasFirst=!1,r.observables=[],r.subscriptions=[],r}return o(t,e),t.prototype._next=function(e){this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{for(var r=0;r<t&&!this.hasFirst;r++){var n=e[r],o=c.subscribeToResult(this,n,void 0,r);this.subscriptions&&this.subscriptions.push(o),this.add(o)}this.observables=null}},t.prototype.notifyNext=function(e,t,r){if(!this.hasFirst){this.hasFirst=!0;for(var n=0;n<this.subscriptions.length;n++)if(n!==r){var o=this.subscriptions[n];o.unsubscribe(),this.remove(o)}this.subscriptions=null}this.destination.next(t)},t}(u.OuterSubscriber);t.RaceSubscriber=l},970:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837);function o(e){var t=e.start,r=e.index,n=e.count,o=e.subscriber;r>=n?o.complete():(o.next(t),o.closed||(e.index=r+1,e.start=t+1,this.schedule(e)))}t.range=function(e,t,r){return void 0===e&&(e=0),new n.Observable((function(n){void 0===t&&(t=e,e=0);var i=0,s=e;if(r)return r.schedule(o,0,{index:i,count:t,start:e,subscriber:n});for(;;){if(i++>=t){n.complete();break}if(n.next(s++),n.closed)break}}))},t.dispatch=o},6525:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837);function o(e){var t=e.error;e.subscriber.error(t)}t.throwError=function(e,t){return t?new n.Observable((function(r){return t.schedule(o,0,{error:e,subscriber:r})})):new n.Observable((function(t){return t.error(e)}))}},6170:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(2842),i=r(3512),s=r(4503);function u(e){var t=e.index,r=e.period,n=e.subscriber;if(n.next(t),!n.closed){if(-1===r)return n.complete();e.index=t+1,this.schedule(e,r)}}t.timer=function(e,t,r){void 0===e&&(e=0);var c=-1;return i.isNumeric(t)?c=Number(t)<1?1:Number(t):s.isScheduler(t)&&(r=t),s.isScheduler(r)||(r=o.async),new n.Observable((function(t){var n=i.isNumeric(e)?e:+e-r.now();return r.schedule(u,n,{index:0,period:c,subscriber:t})}))}},9789:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(601),i=r(2684);t.using=function(e,t){return new n.Observable((function(r){var n,s;try{n=e()}catch(e){return void r.error(e)}try{s=t(n)}catch(e){return void r.error(e)}var u=(s?o.from(s):i.EMPTY).subscribe(r);return function(){u.unsubscribe(),n&&n.unsubscribe()}}))}},8587:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(4176),s=r(6835),u=r(9454),c=r(8630),a=r(4387);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[e.length-1];return"function"==typeof r&&e.pop(),i.fromArray(e,void 0).lift(new l(r))};var l=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new h(e,this.resultSelector))},e}();t.ZipOperator=l;var h=function(e){function t(t,r,n){void 0===n&&(n=Object.create(null));var o=e.call(this,t)||this;return o.resultSelector=r,o.iterators=[],o.active=0,o.resultSelector="function"==typeof r?r:void 0,o}return o(t,e),t.prototype._next=function(e){var t=this.iterators;s.isArray(e)?t.push(new f(e)):"function"==typeof e[c.iterator]?t.push(new p(e[c.iterator]())):t.push(new b(this.destination,this,e))},t.prototype._complete=function(){var e=this.iterators,t=e.length;if(this.unsubscribe(),0!==t){this.active=t;for(var r=0;r<t;r++){var n=e[r];n.stillUnsubscribed?this.destination.add(n.subscribe()):this.active--}}else this.destination.complete()},t.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},t.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,r=this.destination,n=0;n<t;n++)if("function"==typeof(s=e[n]).hasValue&&!s.hasValue())return;var o=!1,i=[];for(n=0;n<t;n++){var s,u=(s=e[n]).next();if(s.hasCompleted()&&(o=!0),u.done)return void r.complete();i.push(u.value)}this.resultSelector?this._tryresultSelector(i):r.next(i),o&&r.complete()},t.prototype._tryresultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(u.Subscriber);t.ZipSubscriber=h;var p=function(){function e(e){this.iterator=e,this.nextResult=e.next()}return e.prototype.hasValue=function(){return!0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return Boolean(e&&e.done)},e}(),f=function(){function e(e){this.array=e,this.index=0,this.length=0,this.length=e.length}return e.prototype[c.iterator]=function(){return this},e.prototype.next=function(e){var t=this.index++,r=this.array;return t<this.length?{value:r[t],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),b=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.parent=r,o.observable=n,o.stillUnsubscribed=!0,o.buffer=[],o.isComplete=!1,o}return o(t,e),t.prototype[c.iterator]=function(){return this},t.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},t.prototype.hasValue=function(){return this.buffer.length>0},t.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},t.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},t.prototype.notifyNext=function(e){this.buffer.push(e),this.parent.checkIterators()},t.prototype.subscribe=function(){return a.innerSubscribe(this.observable,new a.SimpleInnerSubscriber(this))},t}(a.SimpleOuterSubscriber)},192:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2697);t.concatAll=function(){return n.mergeAll(1)}},7224:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(9454);t.filter=function(e,t){return function(r){return r.lift(new s(e,t))}};var s=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new u(e,this.predicate,this.thisArg))},e}(),u=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.predicate=r,o.thisArg=n,o.count=0,o}return o(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(i.Subscriber)},2624:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(9454),s=r(598),u=r(2837),c=r(4144);t.groupBy=function(e,t,r,n){return function(o){return o.lift(new a(e,t,r,n))}};var a=function(){function e(e,t,r,n){this.keySelector=e,this.elementSelector=t,this.durationSelector=r,this.subjectSelector=n}return e.prototype.call=function(e,t){return t.subscribe(new l(e,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},e}(),l=function(e){function t(t,r,n,o,i){var s=e.call(this,t)||this;return s.keySelector=r,s.elementSelector=n,s.durationSelector=o,s.subjectSelector=i,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return o(t,e),t.prototype._next=function(e){var t;try{t=this.keySelector(e)}catch(e){return void this.error(e)}this._group(e,t)},t.prototype._group=function(e,t){var r=this.groups;r||(r=this.groups=new Map);var n,o=r.get(t);if(this.elementSelector)try{n=this.elementSelector(e)}catch(e){this.error(e)}else n=e;if(!o){o=this.subjectSelector?this.subjectSelector():new c.Subject,r.set(t,o);var i=new p(t,o,this);if(this.destination.next(i),this.durationSelector){var s=void 0;try{s=this.durationSelector(new p(t,o))}catch(e){return void this.error(e)}this.add(s.subscribe(new h(t,o,this)))}}o.closed||o.next(n)},t.prototype._error=function(e){var t=this.groups;t&&(t.forEach((function(t,r){t.error(e)})),t.clear()),this.destination.error(e)},t.prototype._complete=function(){var e=this.groups;e&&(e.forEach((function(e,t){e.complete()})),e.clear()),this.destination.complete()},t.prototype.removeGroup=function(e){this.groups.delete(e)},t.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&e.prototype.unsubscribe.call(this))},t}(i.Subscriber),h=function(e){function t(t,r,n){var o=e.call(this,r)||this;return o.key=t,o.group=r,o.parent=n,o}return o(t,e),t.prototype._next=function(e){this.complete()},t.prototype._unsubscribe=function(){var e=this.parent,t=this.key;this.key=this.parent=null,e&&e.removeGroup(t)},t}(i.Subscriber),p=function(e){function t(t,r,n){var o=e.call(this)||this;return o.key=t,o.groupSubject=r,o.refCountSubscription=n,o}return o(t,e),t.prototype._subscribe=function(e){var t=new s.Subscription,r=this.refCountSubscription,n=this.groupSubject;return r&&!r.closed&&t.add(new f(r)),t.add(n.subscribe(e)),t},t}(u.Observable);t.GroupedObservable=p;var f=function(e){function t(t){var r=e.call(this)||this;return r.parent=t,t.count++,r}return o(t,e),t.prototype.unsubscribe=function(){var t=this.parent;t.closed||this.closed||(e.prototype.unsubscribe.call(this),t.count-=1,0===t.count&&t.attemptedToUnsubscribe&&t.unsubscribe())},t}(s.Subscription)},8359:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(9454);t.map=function(e,t){return function(r){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new s(e,t))}};var s=function(){function e(e,t){this.project=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new u(e,this.project,this.thisArg))},e}();t.MapOperator=s;var u=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.project=r,o.count=0,o.thisArg=n||o,o}return o(t,e),t.prototype._next=function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(i.Subscriber)},2697:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2418),o=r(141);t.mergeAll=function(e){return void 0===e&&(e=Number.POSITIVE_INFINITY),n.mergeMap(o.identity,e)}},2418:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(8359),s=r(601),u=r(4387);function c(e,t,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof t?function(n){return n.pipe(c((function(r,n){return s.from(e(r,n)).pipe(i.map((function(e,o){return t(r,e,n,o)})))}),r))}:("number"==typeof t&&(r=t),function(t){return t.lift(new a(e,r))})}t.mergeMap=c;var a=function(){function e(e,t){void 0===t&&(t=Number.POSITIVE_INFINITY),this.project=e,this.concurrent=t}return e.prototype.call=function(e,t){return t.subscribe(new l(e,this.project,this.concurrent))},e}();t.MergeMapOperator=a;var l=function(e){function t(t,r,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var o=e.call(this,t)||this;return o.project=r,o.concurrent=n,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return o(t,e),t.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)},t.prototype._tryNext=function(e){var t,r=this.index++;try{t=this.project(e,r)}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(t)},t.prototype._innerSub=function(e){var t=new u.SimpleInnerSubscriber(this),r=this.destination;r.add(t);var n=u.innerSubscribe(e,t);n!==t&&r.add(n)},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyComplete=function(){var e=this.buffer;this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},t}(u.SimpleOuterSubscriber);t.MergeMapSubscriber=l,t.flatMap=c},3396:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(9454),s=r(5362);t.observeOn=function(e,t){return void 0===t&&(t=0),function(r){return r.lift(new u(e,t))}};var u=function(){function e(e,t){void 0===t&&(t=0),this.scheduler=e,this.delay=t}return e.prototype.call=function(e,t){return t.subscribe(new c(e,this.scheduler,this.delay))},e}();t.ObserveOnOperator=u;var c=function(e){function t(t,r,n){void 0===n&&(n=0);var o=e.call(this,t)||this;return o.scheduler=r,o.delay=n,o}return o(t,e),t.dispatch=function(e){var t=e.notification,r=e.destination;t.observe(r),this.unsubscribe()},t.prototype.scheduleMessage=function(e){this.destination.add(this.scheduler.schedule(t.dispatch,this.delay,new a(e,this.destination)))},t.prototype._next=function(e){this.scheduleMessage(s.Notification.createNext(e))},t.prototype._error=function(e){this.scheduleMessage(s.Notification.createError(e)),this.unsubscribe()},t.prototype._complete=function(){this.scheduleMessage(s.Notification.createComplete()),this.unsubscribe()},t}(i.Subscriber);t.ObserveOnSubscriber=c;var a=function(e,t){this.notification=e,this.destination=t};t.ObserveOnMessage=a},8295:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(9454);t.refCount=function(){return function(e){return e.lift(new s(e))}};var s=function(){function e(e){this.connectable=e}return e.prototype.call=function(e,t){var r=this.connectable;r._refCount++;var n=new u(e,r),o=t.subscribe(n);return n.closed||(n.connection=r.connect()),o},e}(),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}return o(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var r=this.connection,n=e._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe()}}else this.connection=null},t}(i.Subscriber)},140:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(598);t.scheduleArray=function(e,t){return new n.Observable((function(r){var n=new o.Subscription,i=0;return n.add(t.schedule((function(){i!==e.length?(r.next(e[i++]),r.closed||n.add(this.schedule())):r.complete()}))),n}))}},3482:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(598),i=r(8630);t.scheduleIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(r){var n,s=new o.Subscription;return s.add((function(){n&&"function"==typeof n.return&&n.return()})),s.add(t.schedule((function(){n=e[i.iterator](),s.add(t.schedule((function(){if(!r.closed){var e,t;try{var o=n.next();e=o.value,t=o.done}catch(e){return void r.error(e)}t?r.complete():(r.next(e),this.schedule())}})))}))),s}))}},8548:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(598),i=r(6079);t.scheduleObservable=function(e,t){return new n.Observable((function(r){var n=new o.Subscription;return n.add(t.schedule((function(){var o=e[i.observable]();n.add(o.subscribe({next:function(e){n.add(t.schedule((function(){return r.next(e)})))},error:function(e){n.add(t.schedule((function(){return r.error(e)})))},complete:function(){n.add(t.schedule((function(){return r.complete()})))}}))}))),n}))}},4482:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837),o=r(598);t.schedulePromise=function(e,t){return new n.Observable((function(r){var n=new o.Subscription;return n.add(t.schedule((function(){return e.then((function(e){n.add(t.schedule((function(){r.next(e),n.add(t.schedule((function(){return r.complete()})))})))}),(function(e){n.add(t.schedule((function(){return r.error(e)})))}))}))),n}))}},5432:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(8548),o=r(4482),i=r(140),s=r(3482),u=r(876),c=r(5234),a=r(1112),l=r(6400);t.scheduled=function(e,t){if(null!=e){if(u.isInteropObservable(e))return n.scheduleObservable(e,t);if(c.isPromise(e))return o.schedulePromise(e,t);if(a.isArrayLike(e))return i.scheduleArray(e,t);if(l.isIterable(e)||"string"==typeof e)return s.scheduleIterable(e,t)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}},3199:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(r(598).Subscription);t.Action=i},5435:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t.scheduled||(t.scheduled=requestAnimationFrame((function(){return t.flush(null)}))))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);0===t.actions.length&&(cancelAnimationFrame(r),t.scheduled=void 0)},t}(r(3592).AsyncAction);t.AnimationFrameAction=i},5546:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,r=this.actions,n=-1,o=r.length;e=e||r.shift();do{if(t=e.execute(e.state,e.delay))break}while(++n<o&&(e=r.shift()));if(this.active=!1,t){for(;++n<o&&(e=r.shift());)e.unsubscribe();throw t}},t}(r(3936).AsyncScheduler);t.AnimationFrameScheduler=i},6326:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(6797),s=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t.scheduled||(t.scheduled=i.Immediate.setImmediate(t.flush.bind(t,null))))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);0===t.actions.length&&(i.Immediate.clearImmediate(r),t.scheduled=void 0)},t}(r(3592).AsyncAction);t.AsapAction=s},8072:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,r=this.actions,n=-1,o=r.length;e=e||r.shift();do{if(t=e.execute(e.state,e.delay))break}while(++n<o&&(e=r.shift()));if(this.active=!1,t){for(;++n<o&&(e=r.shift());)e.unsubscribe();throw t}},t}(r(3936).AsyncScheduler);t.AsapScheduler=i},3592:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return o(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r=!1,n=void 0;try{this.work(e)}catch(e){r=!0,n=!!e&&e||new Error(e)}if(r)return this.unsubscribe(),n},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,r=t.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(r(3199).Action);t.AsyncAction=i},3936:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(2785),s=function(e){function t(r,n){void 0===n&&(n=i.Scheduler.now);var o=e.call(this,r,(function(){return t.delegate&&t.delegate!==o?t.delegate.now():n()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return o(t,e),t.prototype.schedule=function(r,n,o){return void 0===n&&(n=0),t.delegate&&t.delegate!==this?t.delegate.schedule(r,n,o):e.prototype.schedule.call(this,r,n,o)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var r;this.active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(i.Scheduler);t.AsyncScheduler=s},5572:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.schedule=function(t,r){return void 0===r&&(r=0),r>0?e.prototype.schedule.call(this,t,r):(this.delay=r,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,r){return r>0||this.closed?e.prototype.execute.call(this,t,r):this._execute(t,r)},t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0?e.prototype.requestAsyncId.call(this,t,r,n):t.flush(this)},t}(r(3592).AsyncAction);t.QueueAction=i},747:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t}(r(3936).AsyncScheduler);t.QueueScheduler=i},1669:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(3592),s=function(e){function t(t,r){void 0===t&&(t=u),void 0===r&&(r=Number.POSITIVE_INFINITY);var n=e.call(this,t,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return o(t,e),t.prototype.flush=function(){for(var e,t,r=this.actions,n=this.maxFrames;(t=r[0])&&t.delay<=n&&(r.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=r.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(r(3936).AsyncScheduler);t.VirtualTimeScheduler=s;var u=function(e){function t(t,r,n){void 0===n&&(n=t.index+=1);var o=e.call(this,t,r)||this;return o.scheduler=t,o.work=r,o.index=n,o.active=!0,o.index=t.index=n,o}return o(t,e),t.prototype.schedule=function(r,n){if(void 0===n&&(n=0),!this.id)return e.prototype.schedule.call(this,r,n);this.active=!1;var o=new t(this.scheduler,this.work);return this.add(o),o.schedule(r,n)},t.prototype.requestAsyncId=function(e,r,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(t.sortActions),!0},t.prototype.recycleAsyncId=function(e,t,r){void 0===r&&(r=0)},t.prototype._execute=function(t,r){if(!0===this.active)return e.prototype._execute.call(this,t,r)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(i.AsyncAction);t.VirtualAction=u},1440:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(5435),o=r(5546);t.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),t.animationFrame=t.animationFrameScheduler},2265:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(6326),o=r(8072);t.asapScheduler=new o.AsapScheduler(n.AsapAction),t.asap=t.asapScheduler},2842:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(3592),o=r(3936);t.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),t.async=t.asyncScheduler},5949:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(5572),o=r(747);t.queueScheduler=new o.QueueScheduler(n.QueueAction),t.queue=t.queueScheduler},8630:(e,t)=>{function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.getSymbolIterator=r,t.iterator=r(),t.$$iterator=t.iterator},6079:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},3188:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rxSubscriber="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),t.$$rxSubscriber=t.rxSubscriber},874:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return e.prototype=Object.create(Error.prototype),e}();t.ArgumentOutOfRangeError=r},7811:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return e.prototype=Object.create(Error.prototype),e}();t.EmptyError=r},6797:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=1,n=Promise.resolve(),o={};function i(e){return e in o&&(delete o[e],!0)}t.Immediate={setImmediate:function(e){var t=r++;return o[t]=!0,n.then((function(){return i(t)&&e()})),t},clearImmediate:function(e){i(e)}},t.TestTools={pending:function(){return Object.keys(o).length}}},3117:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return e.prototype=Object.create(Error.prototype),e}();t.ObjectUnsubscribedError=r},9300:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return e.prototype=Object.create(Error.prototype),e}();t.TimeoutError=r},3305:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}();t.UnsubscriptionError=r},7481:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(9454);t.canReportError=function(e){for(;e;){var t=e,r=t.closed,o=t.destination,i=t.isStopped;if(r||i)return!1;e=o&&o instanceof n.Subscriber?o:null}return!0}},9219:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hostReportError=function(e){setTimeout((function(){throw e}),0)}},141:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=function(e){return e}},6835:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=Array.isArray||function(e){return e&&"number"==typeof e.length}},1112:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},1517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=function(e){return"function"==typeof e}},876:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(6079);t.isInteropObservable=function(e){return e&&"function"==typeof e[n.observable]}},6400:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(8630);t.isIterable=function(e){return e&&"function"==typeof e[n.iterator]}},3512:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(6835);t.isNumeric=function(e){return!n.isArray(e)&&e-parseFloat(e)+1>=0}},7399:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isObject=function(e){return null!==e&&"object"==typeof e}},135:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(2837);t.isObservable=function(e){return!!e&&(e instanceof n.Observable||"function"==typeof e.lift&&"function"==typeof e.subscribe)}},5234:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=function(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}},4503:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=function(e){return e&&"function"==typeof e.schedule}},1543:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=function(){}},2052:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=function(e,t){function r(){return!r.pred.apply(r.thisArg,arguments)}return r.pred=e,r.thisArg=t,r}},8105:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(141);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},3321:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(3196),o=r(8185),i=r(8192),s=r(3865),u=r(1112),c=r(5234),a=r(7399),l=r(8630),h=r(6079);t.subscribeTo=function(e){if(e&&"function"==typeof e[h.observable])return s.subscribeToObservable(e);if(u.isArrayLike(e))return n.subscribeToArray(e);if(c.isPromise(e))return o.subscribeToPromise(e);if(e&&"function"==typeof e[l.iterator])return i.subscribeToIterable(e);var t=a.isObject(e)?"an invalid object":"'"+e+"'";throw new TypeError("You provided "+t+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},3196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeToArray=function(e){return function(t){for(var r=0,n=e.length;r<n&&!t.closed;r++)t.next(e[r]);t.complete()}}},8192:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(8630);t.subscribeToIterable=function(e){return function(t){for(var r=e[n.iterator]();;){var o=void 0;try{o=r.next()}catch(e){return t.error(e),t}if(o.done){t.complete();break}if(t.next(o.value),t.closed)break}return"function"==typeof r.return&&t.add((function(){r.return&&r.return()})),t}}},3865:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(6079);t.subscribeToObservable=function(e){return function(t){var r=e[n.observable]();if("function"!=typeof r.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return r.subscribe(t)}}},8185:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(9219);t.subscribeToPromise=function(e){return function(t){return e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,n.hostReportError),t}}},6973:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(3848),o=r(3321),i=r(2837);t.subscribeToResult=function(e,t,r,s,u){if(void 0===u&&(u=new n.InnerSubscriber(e,r,s)),!u.closed)return t instanceof i.Observable?t.subscribe(u):o.subscribeTo(t)(u)}},3123:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(9454),o=r(3188),i=r(4556);t.toSubscriber=function(e,t,r){if(e){if(e instanceof n.Subscriber)return e;if(e[o.rxSubscriber])return e[o.rxSubscriber]()}return e||t||r?new n.Subscriber(e,t,r):new n.Subscriber(i.empty)}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(()=>{var e=r(3152),t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,r)};function n(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function o(e){return"function"==typeof e}var i=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack,i=e},get useDeprecatedSynchronousErrorHandling(){return i}};function u(e){setTimeout((function(){throw e}),0)}var c={closed:!0,next:function(e){},error:function(e){if(s.useDeprecatedSynchronousErrorHandling)throw e;u(e)},complete:function(){}},a=function(){return Array.isArray||function(e){return e&&"number"==typeof e.length}}();var l=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),h=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var t,r;if(!this.closed){var n=this,i=n._parentOrParents,s=n._ctorUnsubscribe,u=n._unsubscribe,c=n._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof e)i.remove(this);else if(null!==i)for(var h=0;h<i.length;++h)i[h].remove(this);if(o(u)){s&&(this._unsubscribe=void 0);try{u.call(this)}catch(e){t=e instanceof l?p(e.errors):[e]}}if(a(c)){h=-1;for(var f=c.length;++h<f;){var b=c[h];if(null!==(r=b)&&"object"==typeof r)try{b.unsubscribe()}catch(e){t=t||[],e instanceof l?t=t.concat(p(e.errors)):t.push(e)}}}if(t)throw new l(t)}},e.prototype.add=function(t){var r=t;if(!t)return e.EMPTY;switch(typeof t){case"function":r=new e(t);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof e)){var n=r;(r=new e)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof e){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var r=t.indexOf(e);-1!==r&&t.splice(r,1)}},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}();function p(e){return e.reduce((function(e,t){return e.concat(t instanceof l?t.errors:t)}),[])}var f=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),b=function(e){function t(r,n,o){var i=e.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=c;break;case 1:if(!r){i.destination=c;break}if("object"==typeof r){r instanceof t?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new d(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new d(i,r,n,o)}return i}return n(t,e),t.prototype[f]=function(){return this},t.create=function(e,r,n){var o=new t(e,r,n);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(h),d=function(e){function t(t,r,n,i){var s,u=e.call(this)||this;u._parentSubscriber=t;var a=u;return o(r)?s=r:r&&(s=r.next,n=r.error,i=r.complete,r!==c&&(o((a=Object.create(r)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=s,u._error=n,u._complete=i,u}return n(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,r=s.useDeprecatedSynchronousErrorHandling;if(this._error)r&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)r?(t.syncErrorValue=e,t.syncErrorThrown=!0):u(e),this.unsubscribe();else{if(this.unsubscribe(),r)throw e;u(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var r=function(){return e._complete.call(e._context)};s.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw e;u(e)}},t.prototype.__tryOrSetError=function(e,t,r){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,r)}catch(t){return s.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(u(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(b),y=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return n(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r=!1,n=void 0;try{this.work(e)}catch(e){r=!0,n=!!e&&e||new Error(e)}if(r)return this.unsubscribe(),n},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,r=t.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(function(e){function t(t,r){return e.call(this)||this}return n(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(h)),v=function(){function e(t,r){void 0===r&&(r=e.now),this.SchedulerAction=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(r,t)},e.now=function(){return Date.now()},e}(),_=new(function(e){function t(r,n){void 0===n&&(n=v.now);var o=e.call(this,r,(function(){return t.delegate&&t.delegate!==o?t.delegate.now():n()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return n(t,e),t.prototype.schedule=function(r,n,o){return void 0===n&&(n=0),t.delegate&&t.delegate!==this?t.delegate.schedule(r,n,o):e.prototype.schedule.call(this,r,n,o)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var r;this.active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(v))(y),O={leading:!0,trailing:!1};function m(e,t,r){return void 0===t&&(t=_),void 0===r&&(r=O),function(n){return n.lift(new S(e,t,r.leading,r.trailing))}}var w,S=function(){function e(e,t,r,n){this.duration=e,this.scheduler=t,this.leading=r,this.trailing=n}return e.prototype.call=function(e,t){return t.subscribe(new g(e,this.duration,this.scheduler,this.leading,this.trailing))},e}(),g=function(e){function t(t,r,n,o,i){var s=e.call(this,t)||this;return s.duration=r,s.scheduler=n,s.leading=o,s.trailing=i,s._hasTrailingValue=!1,s._trailingValue=null,s}return n(t,e),t.prototype._next=function(e){this.throttled?this.trailing&&(this._trailingValue=e,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(j,this.duration,{subscriber:this})),this.leading?this.destination.next(e):this.trailing&&(this._trailingValue=e,this._hasTrailingValue=!0))},t.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},t.prototype.clearThrottle=function(){var e=this.throttled;e&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),e.unsubscribe(),this.remove(e),this.throttled=null)},t}(b);function j(e){e.subscriber.clearThrottle()}!function(e){e[e.Timed=0]="Timed",e[e.OnClick=1]="OnClick",e[e.OnClickTimed=2]="OnClickTimed",e[e.OnFiveCookiesBonus=3]="OnFiveCookiesBonus",e[e.OnClickRandomChance=4]="OnClickRandomChance"}(w||(w={}));class x{constructor(e,t,r,n,o,i){this.name=e,this.description=t,this.level=0,this.baseValue=r,this.cost=n,this.type=o,this.observerPlayer=i}levelUp(e){return e.cookieAmount-=this.cost,e.emitCurrentNumberOfCookies(),this.cost+=Math.round(.8*this.cost),this.level++,this.baseValue+=Math.round(.1*this.baseValue*this.level),this.createObservable(),e.pushObservable(this.observable,this.type),1}createObservable(){switch(this.type){case w.Timed:this.observable=(0,e.FG)(1e3).pipe(m(3e3-100*this.level));break;case w.OnClick:this.observable=(0,e.RB)(document.querySelector(".Cookie"),"click");break;case w.OnClickTimed:this.observable=(0,e.RB)(document.querySelector(".Cookie"),"click").pipe(m(5e3-100*this.level));break;case w.OnFiveCookiesBonus:this.observable=new e.y$((e=>{this.observerPlayer.subscribe((t=>{t%5==0&&e.next(1)}))}));break;case w.OnClickRandomChance:this.observable=(0,e.RB)(document.querySelector(".Cookie"),"click")}}}const E=new class{constructor(){this.cookieAmount=0,this.observablesArray=[],this.cookieCountObservable=new e.xQ}emitCurrentNumberOfCookies(){this.cookieCountObservable.next(this.cookieAmount)}pushObservable(e,t){this.observablesArray.push(e),e.subscribe((e=>{switch(t){case w.Timed:case w.OnClick:case w.OnClickTimed:case w.OnFiveCookiesBonus:this.cookieAmount+=1;break;case w.OnClickRandomChance:Math.random()>.8&&(this.cookieAmount+=1)}this.emitCurrentNumberOfCookies()}))}};let P=[new x("Rolling pin","Get a bonus cookie every set amount of seconds",1,10,w.Timed,E.cookieCountObservable),new x("A helping hand","When clicking you get a bonus cookie",1,15,w.OnClick,E.cookieCountObservable),new x("Right on time","Once every five seconds when clicking you get a bonus cookie",1,15,w.OnClickTimed,E.cookieCountObservable),new x("The collector","Every five cookies you collect you get a bonus cookie",1,30,w.OnFiveCookiesBonus,E.cookieCountObservable),new x("A stroke of luck","Each click has a small chance of getting you a bonus cookie",1,30,w.OnClickRandomChance,E.cookieCountObservable)];const A=new class{constructor(e){this.player=e,this.upgrades=[],this.playerCookieAmountListener=e.cookieCountObservable}addUpgrade(e){this.upgrades.push(e)}addUpgrades(e){e.forEach((e=>this.upgrades.push(e)))}draw(t){const r=document.createElement("div");r.className="CookieClicker",t.appendChild(r);const n=document.createElement("div");n.className="Upgrades",r.appendChild(n);const o=document.createElement("div");o.className="CookieContainer",r.appendChild(o);const i=document.createElement("button");i.title="Get a cookie each time you click",i.innerHTML='<img src="cookie.png" width = "200" height = "200" />',i.className="Cookie",(0,e.RB)(i,"click").subscribe((()=>{this.player.cookieAmount+=1,this.player.emitCurrentNumberOfCookies()})),o.appendChild(i);const s=document.createElement("label");s.className="CookieAmount",o.appendChild(s),s.innerHTML=this.player.cookieAmount.toString(),this.upgrades.forEach((t=>{const r=document.createElement("button");r.className="Upgrade",r.innerHTML=`${t.name} ${t.level} <br/>Cost: ${t.cost}`,r.title=t.description,r.disabled=!0,n.appendChild(r),(0,e.RB)(r,"click").subscribe((e=>{t.levelUp(this.player),r.innerHTML=`${t.name} ${t.level}<br/>Cost: ${t.cost}`}))}));const u=document.querySelectorAll(".Upgrade");this.playerCookieAmountListener.subscribe((e=>{u.forEach(((t,r)=>{this.upgrades[r].cost<e?t.disabled=!1:t.disabled=!0})),document.querySelector(".CookieAmount").innerHTML=e.toString()}))}}(E);A.addUpgrades(P),A.draw(document.body)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,