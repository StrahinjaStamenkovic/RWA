(()=>{"use strict";var t={3152:(t,e,r)=>{r(2837).Observable,r(8448).ConnectableObservable,r(2624).GroupedObservable,r(6079).observable;var n=r(4144);e.xQ=n.Subject,r(2859).BehaviorSubject,r(3904).ReplaySubject,r(8938).AsyncSubject;var o=r(2265);o.asap,o.asapScheduler;var i=r(2842);i.async,i.asyncScheduler;var s=r(5949);s.queue,s.queueScheduler;var u=r(1440);u.animationFrame,u.animationFrameScheduler;var c=r(1669);c.VirtualTimeScheduler,c.VirtualAction,r(2785).Scheduler,r(598).Subscription,r(9454).Subscriber;var a=r(5362);a.Notification,a.NotificationKind,r(8105).pipe,r(1543).noop,r(141).identity,r(135).isObservable,r(874).ArgumentOutOfRangeError,r(7811).EmptyError,r(3117).ObjectUnsubscribedError,r(3305).UnsubscriptionError,r(9300).TimeoutError,r(8406).bindCallback,r(1997).bindNodeCallback,r(8313).combineLatest,r(7501).concat,r(255).defer,r(2684).empty,r(2146).forkJoin,r(601).from;var l=r(2556);e.RB=l.fromEvent,r(5686).fromEventPattern,r(4215).generate,r(7596).iif;var p=r(5126);e.FG=p.interval,r(5542).merge,r(7675).never,r(6102).of,r(4278).onErrorResumeNext,r(6908).pairs,r(733).partition,r(4710).race,r(970).range,r(6525).throwError,r(6170).timer,r(9789).using,r(8587).zip,r(5432).scheduled,r(2684).EMPTY,r(7675).NEVER,r(9079).config},8938:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(4144),s=r(598),u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return o(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),s.Subscription.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),s.Subscription.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.Subject);e.AsyncSubject=u},2859:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(4144),s=r(3117),u=function(t){function e(e){var r=t.call(this)||this;return r._value=e,r}return o(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return r&&!r.closed&&e.next(this._value),r},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new s.ObjectUnsubscribedError;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.Subject);e.BehaviorSubject=u},3848:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r,n){var o=t.call(this)||this;return o.parent=e,o.outerValue=r,o.outerIndex=n,o.index=0,o}return o(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(r(9454).Subscriber);e.InnerSubscriber=i},5362:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n,o=r(2684),i=r(6102),s=r(6525);(n=e.NotificationKind||(e.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var u=function(){function t(t,e,r){this.kind=t,this.value=e,this.error=r,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,r){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return r&&r()}},t.prototype.accept=function(t,e,r){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,r)},t.prototype.toObservable=function(){switch(this.kind){case"N":return i.of(this.value);case"E":return s.throwError(this.error);case"C":return o.empty()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();e.Notification=u},2837:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(7481),o=r(3123),i=r(6079),s=r(8105),u=r(9079),c=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,i=o.toSubscriber(t,e,r);if(n?i.add(n.call(i,this.source)):i.add(this.source||u.config.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.config.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.config.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),n.canReportError(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=a(e))((function(e,n){var o;o=r.subscribe((function(e){try{t(e)}catch(t){n(t),o&&o.unsubscribe()}}),n,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[i.observable]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:s.pipeFromArray(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=a(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function a(t){if(t||(t=u.config.Promise||Promise),!t)throw new Error("no Promise impl found");return t}e.Observable=c},4556:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(9079),o=r(9219);e.empty={closed:!0,next:function(t){},error:function(t){if(n.config.useDeprecatedSynchronousErrorHandling)throw t;o.hostReportError(t)},complete:function(){}}},9455:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.notifyNext=function(t,e,r,n,o){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(r(9454).Subscriber);e.OuterSubscriber=i},3904:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(4144),s=r(5949),u=r(598),c=r(3396),a=r(3117),l=r(1585),p=function(t){function e(e,r,n){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this)||this;return o.scheduler=n,o._events=[],o._infiniteTimeWindow=!1,o._bufferSize=e<1?1:e,o._windowTime=r<1?1:r,r===Number.POSITIVE_INFINITY?(o._infiniteTimeWindow=!0,o.next=o.nextInfiniteTimeWindow):o.next=o.nextTimeWindow,o}return o(e,t),e.prototype.nextInfiniteTimeWindow=function(e){if(!this.isStopped){var r=this._events;r.push(e),r.length>this._bufferSize&&r.shift()}t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this.isStopped||(this._events.push(new h(this._getNow(),e)),this._trimBufferThenGetEvents()),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,r=this._infiniteTimeWindow,n=r?this._events:this._trimBufferThenGetEvents(),o=this.scheduler,i=n.length;if(this.closed)throw new a.ObjectUnsubscribedError;if(this.isStopped||this.hasError?e=u.Subscription.EMPTY:(this.observers.push(t),e=new l.SubjectSubscription(this,t)),o&&t.add(t=new c.ObserveOnSubscriber(t,o)),r)for(var s=0;s<i&&!t.closed;s++)t.next(n[s]);else for(s=0;s<i&&!t.closed;s++)t.next(n[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||s.queue).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,r=this._windowTime,n=this._events,o=n.length,i=0;i<o&&!(t-n[i].time<r);)i++;return o>e&&(i=Math.max(i,o-e)),i>0&&n.splice(0,i),n},e}(i.Subject);e.ReplaySubject=p;var h=function(t,e){this.time=t,this.value=e}},2785:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(e,r){void 0===r&&(r=t.now),this.SchedulerAction=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(r,e)},t.now=function(){return Date.now()},t}();e.Scheduler=r},4144:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2837),s=r(9454),u=r(598),c=r(3117),a=r(1585),l=r(3188),p=function(t){function e(e){var r=t.call(this,e)||this;return r.destination=e,r}return o(e,t),e}(s.Subscriber);e.SubjectSubscriber=p;var h=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return o(e,t),e.prototype[l.rxSubscriber]=function(){return new p(this)},e.prototype.lift=function(t){var e=new f(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new c.ObjectUnsubscribedError;if(!this.isStopped)for(var e=this.observers,r=e.length,n=e.slice(),o=0;o<r;o++)n[o].next(t)},e.prototype.error=function(t){if(this.closed)throw new c.ObjectUnsubscribedError;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,r=e.length,n=e.slice(),o=0;o<r;o++)n[o].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new c.ObjectUnsubscribedError;this.isStopped=!0;for(var t=this.observers,e=t.length,r=t.slice(),n=0;n<e;n++)r[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new c.ObjectUnsubscribedError;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new c.ObjectUnsubscribedError;return this.hasError?(t.error(this.thrownError),u.Subscription.EMPTY):this.isStopped?(t.complete(),u.Subscription.EMPTY):(this.observers.push(t),new a.SubjectSubscription(this,t))},e.prototype.asObservable=function(){var t=new i.Observable;return t.source=this,t},e.create=function(t,e){return new f(t,e)},e}(i.Observable);e.Subject=h;var f=function(t){function e(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return o(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.Subscription.EMPTY},e}(h);e.AnonymousSubject=f},1585:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r){var n=t.call(this)||this;return n.subject=e,n.subscriber=r,n.closed=!1,n}return o(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var r=e.indexOf(this.subscriber);-1!==r&&e.splice(r,1)}}},e}(r(598).Subscription);e.SubjectSubscription=i},9454:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(1517),s=r(4556),u=r(598),c=r(3188),a=r(9079),l=r(9219),p=function(t){function e(r,n,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=s.empty;break;case 1:if(!r){i.destination=s.empty;break}if("object"==typeof r){r instanceof e?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new h(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new h(i,r,n,o)}return i}return o(e,t),e.prototype[c.rxSubscriber]=function(){return this},e.create=function(t,r,n){var o=new e(t,r,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(u.Subscription);e.Subscriber=p;var h=function(t){function e(e,r,n,o){var u,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return i.isFunction(r)?u=r:r&&(u=r.next,n=r.error,o=r.complete,r!==s.empty&&(a=Object.create(r),i.isFunction(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=u,c._error=n,c._complete=o,c}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.config.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=a.config.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):l.hostReportError(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;l.hostReportError(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};a.config.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.config.useDeprecatedSynchronousErrorHandling)throw t;l.hostReportError(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!a.config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return a.config.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(l.hostReportError(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(p);e.SafeSubscriber=h},598:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(6835),o=r(7399),i=r(1517),s=r(3305),u=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var r=this,u=r._parentOrParents,a=r._ctorUnsubscribe,l=r._unsubscribe,p=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,u instanceof t)u.remove(this);else if(null!==u)for(var h=0;h<u.length;++h)u[h].remove(this);if(i.isFunction(l)){a&&(this._unsubscribe=void 0);try{l.call(this)}catch(t){e=t instanceof s.UnsubscriptionError?c(t.errors):[t]}}if(n.isArray(p)){h=-1;for(var f=p.length;++h<f;){var b=p[h];if(o.isObject(b))try{b.unsubscribe()}catch(t){e=e||[],t instanceof s.UnsubscriptionError?e=e.concat(c(t.errors)):e.push(t)}}}if(e)throw new s.UnsubscriptionError(e)}},t.prototype.add=function(e){var r=e;if(!e)return t.EMPTY;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof t){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function c(t){return t.reduce((function(t,e){return t.concat(e instanceof s.UnsubscriptionError?e.errors:e)}),[])}e.Subscription=u},9079:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=!1;e.config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){if(t){var e=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+e.stack)}else r&&console.log("RxJS: Back to a better error behavior. Thank you. <3");r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},4387:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(9454),s=r(2837),u=r(3321),c=function(t){function e(e){var r=t.call(this)||this;return r.parent=e,r}return o(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(i.Subscriber);e.SimpleInnerSubscriber=c;var a=function(t){function e(e,r,n){var o=t.call(this)||this;return o.parent=e,o.outerValue=r,o.outerIndex=n,o}return o(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(i.Subscriber);e.ComplexInnerSubscriber=a;var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(i.Subscriber);e.SimpleOuterSubscriber=l;var p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.notifyNext=function(t,e,r,n){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(i.Subscriber);e.ComplexOuterSubscriber=p,e.innerSubscribe=function(t,e){if(!e.closed){if(t instanceof s.Observable)return t.subscribe(e);var r;try{r=u.subscribeTo(t)(e)}catch(t){e.error(t)}return r}}},8448:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i,s=r(4144),u=r(2837),c=r(9454),a=r(598),l=r(8295),p=function(t){function e(e,r){var n=t.call(this)||this;return n.source=e,n.subjectFactory=r,n._refCount=0,n._isComplete=!1,n}return o(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new a.Subscription).add(this.source.subscribe(new h(this.getSubject(),this))),t.closed&&(this._connection=null,t=a.Subscription.EMPTY)),t},e.prototype.refCount=function(){return l.refCount()(this)},e}(u.Observable);e.ConnectableObservable=p,e.connectableObservableDescriptor={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:(i=p.prototype)._subscribe},_isComplete:{value:i._isComplete,writable:!0},getSubject:{value:i.getSubject},connect:{value:i.connect},refCount:{value:i.refCount}};var h=function(t){function e(e,r){var n=t.call(this,e)||this;return n.connectable=r,n}return o(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(s.SubjectSubscriber);!function(t){function e(e,r){var n=t.call(this,e)||this;return n.connectable=r,n}o(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var r=this.connection,n=t._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe()}}else this.connection=null}}(c.Subscriber)},8406:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(8938),i=r(8359),s=r(7481),u=r(6835),c=r(4503);function a(t){var e=this,r=t.args,n=t.subscriber,i=t.params,s=i.callbackFunc,u=i.context,c=i.scheduler,a=i.subject;if(!a){a=i.subject=new o.AsyncSubject;try{s.apply(u,r.concat([function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=t.length<=1?t[0]:t;e.add(c.schedule(l,0,{value:n,subject:a}))}]))}catch(t){a.error(t)}}this.add(a.subscribe(n))}function l(t){var e=t.value,r=t.subject;r.next(e),r.complete()}e.bindCallback=function t(e,r,l){if(r){if(!c.isScheduler(r))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return t(e,l).apply(void 0,n).pipe(i.map((function(t){return u.isArray(t)?r.apply(void 0,t):r(t)})))};l=r}return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,u=this,c={context:u,subject:i,callbackFunc:e,scheduler:l};return new n.Observable((function(r){if(l){var n={args:t,subscriber:r,params:c};return l.schedule(a,0,n)}if(!i){i=new o.AsyncSubject;try{e.apply(u,t.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){s.canReportError(i)?i.error(t):console.warn(t)}}return i.subscribe(r)}))}}},1997:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(8938),i=r(8359),s=r(7481),u=r(4503),c=r(6835);function a(t){var e=this,r=t.params,n=t.subscriber,i=t.context,s=r.callbackFunc,u=r.args,c=r.scheduler,a=r.subject;if(!a){a=r.subject=new o.AsyncSubject;try{s.apply(i,u.concat([function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=t.shift();if(n)e.add(c.schedule(p,0,{err:n,subject:a}));else{var o=t.length<=1?t[0]:t;e.add(c.schedule(l,0,{value:o,subject:a}))}}]))}catch(t){this.add(c.schedule(p,0,{err:t,subject:a}))}}this.add(a.subscribe(n))}function l(t){var e=t.value,r=t.subject;r.next(e),r.complete()}function p(t){var e=t.err;t.subject.error(e)}e.bindNodeCallback=function t(e,r,l){if(r){if(!u.isScheduler(r))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return t(e,l).apply(void 0,n).pipe(i.map((function(t){return c.isArray(t)?r.apply(void 0,t):r(t)})))};l=r}return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i={subject:void 0,args:t,callbackFunc:e,scheduler:l,context:this};return new n.Observable((function(r){var n=i.context,u=i.subject;if(l)return l.schedule(a,0,{params:i,subscriber:r,context:n});if(!u){u=i.subject=new o.AsyncSubject;try{e.apply(n,t.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();r?u.error(r):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){s.canReportError(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}},8313:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(4503),s=r(6835),u=r(9455),c=r(6973),a=r(4176),l={};e.combineLatest=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=void 0,n=void 0;return i.isScheduler(t[t.length-1])&&(n=t.pop()),"function"==typeof t[t.length-1]&&(r=t.pop()),1===t.length&&s.isArray(t[0])&&(t=t[0]),a.fromArray(t,n).lift(new p(r))};var p=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}();e.CombineLatestOperator=p;var h=function(t){function e(e,r){var n=t.call(this,e)||this;return n.resultSelector=r,n.active=0,n.values=[],n.observables=[],n}return o(e,t),e.prototype._next=function(t){this.values.push(l),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var r=0;r<e;r++){var n=t[r];this.add(c.subscribeToResult(this,n,void 0,r))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,r){var n=this.values,o=n[r],i=this.toRespond?o===l?--this.toRespond:this.toRespond:0;n[r]=e,0===i&&(this.resultSelector?this._tryResultSelector(n):this.destination.next(n.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(u.OuterSubscriber);e.CombineLatestSubscriber=h},7501:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(6102),o=r(192);e.concat=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o.concatAll()(n.of.apply(void 0,t))}},255:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(601),i=r(2684);e.defer=function(t){return new n.Observable((function(e){var r;try{r=t()}catch(t){return void e.error(t)}return(r?o.from(r):i.empty()).subscribe(e)}))}},2684:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837);e.EMPTY=new n.Observable((function(t){return t.complete()})),e.empty=function(t){return t?function(t){return new n.Observable((function(e){return t.schedule((function(){return e.complete()}))}))}(t):e.EMPTY}},2146:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(6835),i=r(8359),s=r(7399),u=r(601);function c(t,e){return new n.Observable((function(r){var n=t.length;if(0!==n)for(var o=new Array(n),i=0,s=0,c=function(c){var a=u.from(t[c]),l=!1;r.add(a.subscribe({next:function(t){l||(l=!0,s++),o[c]=t},error:function(t){return r.error(t)},complete:function(){++i!==n&&l||(s===n&&r.next(e?e.reduce((function(t,e,r){return t[e]=o[r],t}),{}):o),r.complete())}}))},a=0;a<n;a++)c(a);else r.complete()}))}e.forkJoin=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var r=t[0];if(o.isArray(r))return c(r,null);if(s.isObject(r)&&Object.getPrototypeOf(r)===Object.prototype){var n=Object.keys(r);return c(n.map((function(t){return r[t]})),n)}}if("function"==typeof t[t.length-1]){var u=t.pop();return c(t=1===t.length&&o.isArray(t[0])?t[0]:t,null).pipe(i.map((function(t){return u.apply(void 0,t)})))}return c(t,null)}},601:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(3321),i=r(5432);e.from=function(t,e){return e?i.scheduled(t,e):t instanceof n.Observable?t:new n.Observable(o.subscribeTo(t))}},4176:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(3196),i=r(140);e.fromArray=function(t,e){return e?i.scheduleArray(t,e):new n.Observable(o.subscribeToArray(t))}},2556:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(6835),i=r(1517),s=r(8359);function u(t,e,r,n,o){var i;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var s=t;t.addEventListener(e,r,o),i=function(){return s.removeEventListener(e,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var c=t;t.on(e,r),i=function(){return c.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var a=t;t.addListener(e,r),i=function(){return a.removeListener(e,r)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var l=0,p=t.length;l<p;l++)u(t[l],e,r,n,o)}n.add(i)}Object.prototype.toString,e.fromEvent=function t(e,r,c,a){return i.isFunction(c)&&(a=c,c=void 0),a?t(e,r,c).pipe(s.map((function(t){return o.isArray(t)?a.apply(void 0,t):a(t)}))):new n.Observable((function(t){u(e,r,(function(e){arguments.length>1?t.next(Array.prototype.slice.call(arguments)):t.next(e)}),t,c)}))}},5686:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(6835),i=r(1517),s=r(8359);e.fromEventPattern=function t(e,r,u){return u?t(e,r).pipe(s.map((function(t){return o.isArray(t)?u.apply(void 0,t):u(t)}))):new n.Observable((function(t){var n,o=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.next(1===e.length?e[0]:e)};try{n=e(o)}catch(e){return void t.error(e)}if(i.isFunction(r))return function(){return r(o,n)}}))}},4215:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(141),i=r(4503);function s(t){var e=t.subscriber,r=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(r){var n=void 0;try{n=r(t.state)}catch(t){return void e.error(t)}if(!n)return void e.complete();if(e.closed)return}var o;try{o=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(o),!e.closed))return this.schedule(t)}}e.generate=function(t,e,r,u,c){var a,l;if(1==arguments.length){var p=t;l=p.initialState,e=p.condition,r=p.iterate,a=p.resultSelector||o.identity,c=p.scheduler}else void 0===u||i.isScheduler(u)?(l=t,a=o.identity,c=u):(l=t,a=u);return new n.Observable((function(t){var n=l;if(c)return c.schedule(s,0,{subscriber:t,iterate:r,condition:e,resultSelector:a,state:n});for(;;){if(e){var o=void 0;try{o=e(n)}catch(e){return void t.error(e)}if(!o){t.complete();break}}var i=void 0;try{i=a(n)}catch(e){return void t.error(e)}if(t.next(i),t.closed)break;try{n=r(n)}catch(e){return void t.error(e)}}}))}},7596:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(255),o=r(2684);e.iif=function(t,e,r){return void 0===e&&(e=o.EMPTY),void 0===r&&(r=o.EMPTY),n.defer((function(){return t()?e:r}))}},5126:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(2842),i=r(3512);function s(t){var e=t.subscriber,r=t.counter,n=t.period;e.next(r),this.schedule({subscriber:e,counter:r+1,period:n},n)}e.interval=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=o.async),(!i.isNumeric(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=o.async),new n.Observable((function(r){return r.add(e.schedule(s,t,{subscriber:r,counter:0,period:t})),r}))}},5542:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(4503),i=r(2697),s=r(4176);e.merge=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=Number.POSITIVE_INFINITY,u=null,c=t[t.length-1];return o.isScheduler(c)?(u=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(r=t.pop())):"number"==typeof c&&(r=t.pop()),null===u&&1===t.length&&t[0]instanceof n.Observable?t[0]:i.mergeAll(r)(s.fromArray(t,u))}},7675:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(1543);e.NEVER=new n.Observable(o.noop),e.never=function(){return e.NEVER}},6102:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(4503),o=r(4176),i=r(140);e.of=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[t.length-1];return n.isScheduler(r)?(t.pop(),i.scheduleArray(t,r)):o.fromArray(t)}},4278:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(601),i=r(6835),s=r(2684);e.onErrorResumeNext=function t(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];if(0===e.length)return s.EMPTY;var u=e[0],c=e.slice(1);return 1===e.length&&i.isArray(u)?t.apply(void 0,u):new n.Observable((function(e){var r=function(){return e.add(t.apply(void 0,c).subscribe(e))};return o.from(u).subscribe({next:function(t){e.next(t)},error:r,complete:r})}))}},6908:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(598);function i(t){var e=t.keys,r=t.index,n=t.subscriber,o=t.subscription,i=t.obj;if(!n.closed)if(r<e.length){var s=e[r];n.next([s,i[s]]),o.add(this.schedule({keys:e,index:r+1,subscriber:n,subscription:o,obj:i}))}else n.complete()}e.pairs=function(t,e){return e?new n.Observable((function(r){var n=Object.keys(t),s=new o.Subscription;return s.add(e.schedule(i,0,{keys:n,index:0,subscriber:r,subscription:s,obj:t})),s})):new n.Observable((function(e){for(var r=Object.keys(t),n=0;n<r.length&&!e.closed;n++){var o=r[n];t.hasOwnProperty(o)&&e.next([o,t[o]])}e.complete()}))},e.dispatch=i},733:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2052),o=r(3321),i=r(7224),s=r(2837);e.partition=function(t,e,r){return[i.filter(e,r)(new s.Observable(o.subscribeTo(t))),i.filter(n.not(e,r))(new s.Observable(o.subscribeTo(t)))]}},4710:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(6835),s=r(4176),u=r(9455),c=r(6973);e.race=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!i.isArray(t[0]))return t[0];t=t[0]}return s.fromArray(t,void 0).lift(new a)};var a=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new l(t))},t}();e.RaceOperator=a;var l=function(t){function e(e){var r=t.call(this,e)||this;return r.hasFirst=!1,r.observables=[],r.subscriptions=[],r}return o(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var r=0;r<e&&!this.hasFirst;r++){var n=t[r],o=c.subscribeToResult(this,n,void 0,r);this.subscriptions&&this.subscriptions.push(o),this.add(o)}this.observables=null}},e.prototype.notifyNext=function(t,e,r){if(!this.hasFirst){this.hasFirst=!0;for(var n=0;n<this.subscriptions.length;n++)if(n!==r){var o=this.subscriptions[n];o.unsubscribe(),this.remove(o)}this.subscriptions=null}this.destination.next(e)},e}(u.OuterSubscriber);e.RaceSubscriber=l},970:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837);function o(t){var e=t.start,r=t.index,n=t.count,o=t.subscriber;r>=n?o.complete():(o.next(e),o.closed||(t.index=r+1,t.start=e+1,this.schedule(t)))}e.range=function(t,e,r){return void 0===t&&(t=0),new n.Observable((function(n){void 0===e&&(e=t,t=0);var i=0,s=t;if(r)return r.schedule(o,0,{index:i,count:e,start:t,subscriber:n});for(;;){if(i++>=e){n.complete();break}if(n.next(s++),n.closed)break}}))},e.dispatch=o},6525:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837);function o(t){var e=t.error;t.subscriber.error(e)}e.throwError=function(t,e){return e?new n.Observable((function(r){return e.schedule(o,0,{error:t,subscriber:r})})):new n.Observable((function(e){return e.error(t)}))}},6170:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(2842),i=r(3512),s=r(4503);function u(t){var e=t.index,r=t.period,n=t.subscriber;if(n.next(e),!n.closed){if(-1===r)return n.complete();t.index=e+1,this.schedule(t,r)}}e.timer=function(t,e,r){void 0===t&&(t=0);var c=-1;return i.isNumeric(e)?c=Number(e)<1?1:Number(e):s.isScheduler(e)&&(r=e),s.isScheduler(r)||(r=o.async),new n.Observable((function(e){var n=i.isNumeric(t)?t:+t-r.now();return r.schedule(u,n,{index:0,period:c,subscriber:e})}))}},9789:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(601),i=r(2684);e.using=function(t,e){return new n.Observable((function(r){var n,s;try{n=t()}catch(t){return void r.error(t)}try{s=e(n)}catch(t){return void r.error(t)}var u=(s?o.from(s):i.EMPTY).subscribe(r);return function(){u.unsubscribe(),n&&n.unsubscribe()}}))}},8587:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(4176),s=r(6835),u=r(9454),c=r(8630),a=r(4387);e.zip=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[t.length-1];return"function"==typeof r&&t.pop(),i.fromArray(t,void 0).lift(new l(r))};var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new p(t,this.resultSelector))},t}();e.ZipOperator=l;var p=function(t){function e(e,r,n){void 0===n&&(n=Object.create(null));var o=t.call(this,e)||this;return o.resultSelector=r,o.iterators=[],o.active=0,o.resultSelector="function"==typeof r?r:void 0,o}return o(e,t),e.prototype._next=function(t){var e=this.iterators;s.isArray(t)?e.push(new f(t)):"function"==typeof t[c.iterator]?e.push(new h(t[c.iterator]())):e.push(new b(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var r=0;r<e;r++){var n=t[r];n.stillUnsubscribed?this.destination.add(n.subscribe()):this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,r=this.destination,n=0;n<e;n++)if("function"==typeof(s=t[n]).hasValue&&!s.hasValue())return;var o=!1,i=[];for(n=0;n<e;n++){var s,u=(s=t[n]).next();if(s.hasCompleted()&&(o=!0),u.done)return void r.complete();i.push(u.value)}this.resultSelector?this._tryresultSelector(i):r.next(i),o&&r.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(u.Subscriber);e.ZipSubscriber=p;var h=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),f=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[c.iterator]=function(){return this},t.prototype.next=function(t){var e=this.index++,r=this.array;return e<this.length?{value:r[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),b=function(t){function e(e,r,n){var o=t.call(this,e)||this;return o.parent=r,o.observable=n,o.stillUnsubscribed=!0,o.buffer=[],o.isComplete=!1,o}return o(e,t),e.prototype[c.iterator]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(){return a.innerSubscribe(this.observable,new a.SimpleInnerSubscriber(this))},e}(a.SimpleOuterSubscriber)},192:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2697);e.concatAll=function(){return n.mergeAll(1)}},7224:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(9454);e.filter=function(t,e){return function(r){return r.lift(new s(t,e))}};var s=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.predicate,this.thisArg))},t}(),u=function(t){function e(e,r,n){var o=t.call(this,e)||this;return o.predicate=r,o.thisArg=n,o.count=0,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.Subscriber)},2624:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(9454),s=r(598),u=r(2837),c=r(4144);e.groupBy=function(t,e,r,n){return function(o){return o.lift(new a(t,e,r,n))}};var a=function(){function t(t,e,r,n){this.keySelector=t,this.elementSelector=e,this.durationSelector=r,this.subjectSelector=n}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),l=function(t){function e(e,r,n,o,i){var s=t.call(this,e)||this;return s.keySelector=r,s.elementSelector=n,s.durationSelector=o,s.subjectSelector=i,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return o(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var r=this.groups;r||(r=this.groups=new Map);var n,o=r.get(e);if(this.elementSelector)try{n=this.elementSelector(t)}catch(t){this.error(t)}else n=t;if(!o){o=this.subjectSelector?this.subjectSelector():new c.Subject,r.set(e,o);var i=new h(e,o,this);if(this.destination.next(i),this.durationSelector){var s=void 0;try{s=this.durationSelector(new h(e,o))}catch(t){return void this.error(t)}this.add(s.subscribe(new p(e,o,this)))}}o.closed||o.next(n)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach((function(e,r){e.error(t)})),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,e){t.complete()})),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.Subscriber),p=function(t){function e(e,r,n){var o=t.call(this,r)||this;return o.key=e,o.group=r,o.parent=n,o}return o(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.Subscriber),h=function(t){function e(e,r,n){var o=t.call(this)||this;return o.key=e,o.groupSubject=r,o.refCountSubscription=n,o}return o(e,t),e.prototype._subscribe=function(t){var e=new s.Subscription,r=this.refCountSubscription,n=this.groupSubject;return r&&!r.closed&&e.add(new f(r)),e.add(n.subscribe(t)),e},e}(u.Observable);e.GroupedObservable=h;var f=function(t){function e(e){var r=t.call(this)||this;return r.parent=e,e.count++,r}return o(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(s.Subscription)},8359:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(9454);e.map=function(t,e){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new s(t,e))}};var s=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.project,this.thisArg))},t}();e.MapOperator=s;var u=function(t){function e(e,r,n){var o=t.call(this,e)||this;return o.project=r,o.count=0,o.thisArg=n||o,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.Subscriber)},2697:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2418),o=r(141);e.mergeAll=function(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),n.mergeMap(o.identity,t)}},2418:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(8359),s=r(601),u=r(4387);function c(t,e,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof e?function(n){return n.pipe(c((function(r,n){return s.from(t(r,n)).pipe(i.map((function(t,o){return e(r,t,n,o)})))}),r))}:("number"==typeof e&&(r=e),function(e){return e.lift(new a(t,r))})}e.mergeMap=c;var a=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.project,this.concurrent))},t}();e.MergeMapOperator=a;var l=function(t){function e(e,r,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var o=t.call(this,e)||this;return o.project=r,o.concurrent=n,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return o(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new u.SimpleInnerSubscriber(this),r=this.destination;r.add(e);var n=u.innerSubscribe(t,e);n!==e&&r.add(n)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(u.SimpleOuterSubscriber);e.MergeMapSubscriber=l,e.flatMap=c},3396:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(9454),s=r(5362);e.observeOn=function(t,e){return void 0===e&&(e=0),function(r){return r.lift(new u(t,e))}};var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.scheduler,this.delay))},t}();e.ObserveOnOperator=u;var c=function(t){function e(e,r,n){void 0===n&&(n=0);var o=t.call(this,e)||this;return o.scheduler=r,o.delay=n,o}return o(e,t),e.dispatch=function(t){var e=t.notification,r=t.destination;e.observe(r),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new a(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(s.Notification.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(s.Notification.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(s.Notification.createComplete()),this.unsubscribe()},e}(i.Subscriber);e.ObserveOnSubscriber=c;var a=function(t,e){this.notification=t,this.destination=e};e.ObserveOnMessage=a},8295:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(9454);e.refCount=function(){return function(t){return t.lift(new s(t))}};var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var r=this.connectable;r._refCount++;var n=new u(t,r),o=e.subscribe(n);return n.closed||(n.connection=r.connect()),o},t}(),u=function(t){function e(e,r){var n=t.call(this,e)||this;return n.connectable=r,n}return o(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var r=this.connection,n=t._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe()}}else this.connection=null},e}(i.Subscriber)},140:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(598);e.scheduleArray=function(t,e){return new n.Observable((function(r){var n=new o.Subscription,i=0;return n.add(e.schedule((function(){i!==t.length?(r.next(t[i++]),r.closed||n.add(this.schedule())):r.complete()}))),n}))}},3482:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(598),i=r(8630);e.scheduleIterable=function(t,e){if(!t)throw new Error("Iterable cannot be null");return new n.Observable((function(r){var n,s=new o.Subscription;return s.add((function(){n&&"function"==typeof n.return&&n.return()})),s.add(e.schedule((function(){n=t[i.iterator](),s.add(e.schedule((function(){if(!r.closed){var t,e;try{var o=n.next();t=o.value,e=o.done}catch(t){return void r.error(t)}e?r.complete():(r.next(t),this.schedule())}})))}))),s}))}},8548:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(598),i=r(6079);e.scheduleObservable=function(t,e){return new n.Observable((function(r){var n=new o.Subscription;return n.add(e.schedule((function(){var o=t[i.observable]();n.add(o.subscribe({next:function(t){n.add(e.schedule((function(){return r.next(t)})))},error:function(t){n.add(e.schedule((function(){return r.error(t)})))},complete:function(){n.add(e.schedule((function(){return r.complete()})))}}))}))),n}))}},4482:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837),o=r(598);e.schedulePromise=function(t,e){return new n.Observable((function(r){var n=new o.Subscription;return n.add(e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){r.next(t),n.add(e.schedule((function(){return r.complete()})))})))}),(function(t){n.add(e.schedule((function(){return r.error(t)})))}))}))),n}))}},5432:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(8548),o=r(4482),i=r(140),s=r(3482),u=r(876),c=r(5234),a=r(1112),l=r(6400);e.scheduled=function(t,e){if(null!=t){if(u.isInteropObservable(t))return n.scheduleObservable(t,e);if(c.isPromise(t))return o.schedulePromise(t,e);if(a.isArrayLike(t))return i.scheduleArray(t,e);if(l.isIterable(t)||"string"==typeof t)return s.scheduleIterable(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},3199:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r){return t.call(this)||this}return o(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(r(598).Subscription);e.Action=i},5435:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return o(e,t),e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0?t.prototype.requestAsyncId.call(this,e,r,n):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,r,n);0===e.actions.length&&(cancelAnimationFrame(r),e.scheduled=void 0)},e}(r(3592).AsyncAction);e.AnimationFrameAction=i},5546:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,r=this.actions,n=-1,o=r.length;t=t||r.shift();do{if(e=t.execute(t.state,t.delay))break}while(++n<o&&(t=r.shift()));if(this.active=!1,e){for(;++n<o&&(t=r.shift());)t.unsubscribe();throw e}},e}(r(3936).AsyncScheduler);e.AnimationFrameScheduler=i},6326:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(6797),s=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return o(e,t),e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0?t.prototype.requestAsyncId.call(this,e,r,n):(e.actions.push(this),e.scheduled||(e.scheduled=i.Immediate.setImmediate(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,r,n);0===e.actions.length&&(i.Immediate.clearImmediate(r),e.scheduled=void 0)},e}(r(3592).AsyncAction);e.AsapAction=s},8072:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,r=this.actions,n=-1,o=r.length;t=t||r.shift();do{if(e=t.execute(t.state,t.delay))break}while(++n<o&&(t=r.shift()));if(this.active=!1,e){for(;++n<o&&(t=r.shift());)t.unsubscribe();throw e}},e}(r(3936).AsyncScheduler);e.AsapScheduler=i},3592:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n.pending=!1,n}return o(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(n,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r=!1,n=void 0;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,r=e.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(r(3199).Action);e.AsyncAction=i},3936:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2785),s=function(t){function e(r,n){void 0===n&&(n=i.Scheduler.now);var o=t.call(this,r,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():n()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return o(e,t),e.prototype.schedule=function(r,n,o){return void 0===n&&(n=0),e.delegate&&e.delegate!==this?e.delegate.schedule(r,n,o):t.prototype.schedule.call(this,r,n,o)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var r;this.active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(i.Scheduler);e.AsyncScheduler=s},5572:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return o(e,t),e.prototype.schedule=function(e,r){return void 0===r&&(r=0),r>0?t.prototype.schedule.call(this,e,r):(this.delay=r,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,r){return r>0||this.closed?t.prototype.execute.call(this,e,r):this._execute(e,r)},e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0?t.prototype.requestAsyncId.call(this,e,r,n):e.flush(this)},e}(r(3592).AsyncAction);e.QueueAction=i},747:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(3936).AsyncScheduler);e.QueueScheduler=i},1669:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(3592),s=function(t){function e(e,r){void 0===e&&(e=u),void 0===r&&(r=Number.POSITIVE_INFINITY);var n=t.call(this,e,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return o(e,t),e.prototype.flush=function(){for(var t,e,r=this.actions,n=this.maxFrames;(e=r[0])&&e.delay<=n&&(r.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=r.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(r(3936).AsyncScheduler);e.VirtualTimeScheduler=s;var u=function(t){function e(e,r,n){void 0===n&&(n=e.index+=1);var o=t.call(this,e,r)||this;return o.scheduler=e,o.work=r,o.index=n,o.active=!0,o.index=e.index=n,o}return o(e,t),e.prototype.schedule=function(r,n){if(void 0===n&&(n=0),!this.id)return t.prototype.schedule.call(this,r,n);this.active=!1;var o=new e(this.scheduler,this.work);return this.add(o),o.schedule(r,n)},e.prototype.requestAsyncId=function(t,r,n){void 0===n&&(n=0),this.delay=t.frame+n;var o=t.actions;return o.push(this),o.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,r){void 0===r&&(r=0)},e.prototype._execute=function(e,r){if(!0===this.active)return t.prototype._execute.call(this,e,r)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(i.AsyncAction);e.VirtualAction=u},1440:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(5435),o=r(5546);e.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),e.animationFrame=e.animationFrameScheduler},2265:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(6326),o=r(8072);e.asapScheduler=new o.AsapScheduler(n.AsapAction),e.asap=e.asapScheduler},2842:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(3592),o=r(3936);e.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),e.async=e.asyncScheduler},5949:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(5572),o=r(747);e.queueScheduler=new o.QueueScheduler(n.QueueAction),e.queue=e.queueScheduler},8630:(t,e)=>{function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(e,"__esModule",{value:!0}),e.getSymbolIterator=r,e.iterator=r(),e.$$iterator=e.iterator},6079:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},3188:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.rxSubscriber="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),e.$$rxSubscriber=e.rxSubscriber},874:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}();e.ArgumentOutOfRangeError=r},7811:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}();e.EmptyError=r},6797:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=1,n=Promise.resolve(),o={};function i(t){return t in o&&(delete o[t],!0)}e.Immediate={setImmediate:function(t){var e=r++;return o[e]=!0,n.then((function(){return i(e)&&t()})),e},clearImmediate:function(t){i(t)}},e.TestTools={pending:function(){return Object.keys(o).length}}},3117:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}();e.ObjectUnsubscribedError=r},9300:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();e.TimeoutError=r},3305:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}();e.UnsubscriptionError=r},7481:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(9454);e.canReportError=function(t){for(;t;){var e=t,r=e.closed,o=e.destination,i=e.isStopped;if(r||i)return!1;t=o&&o instanceof n.Subscriber?o:null}return!0}},9219:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.hostReportError=function(t){setTimeout((function(){throw t}),0)}},141:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.identity=function(t){return t}},6835:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isArray=Array.isArray||function(t){return t&&"number"==typeof t.length}},1112:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isArrayLike=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},1517:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isFunction=function(t){return"function"==typeof t}},876:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(6079);e.isInteropObservable=function(t){return t&&"function"==typeof t[n.observable]}},6400:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(8630);e.isIterable=function(t){return t&&"function"==typeof t[n.iterator]}},3512:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(6835);e.isNumeric=function(t){return!n.isArray(t)&&t-parseFloat(t)+1>=0}},7399:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isObject=function(t){return null!==t&&"object"==typeof t}},135:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(2837);e.isObservable=function(t){return!!t&&(t instanceof n.Observable||"function"==typeof t.lift&&"function"==typeof t.subscribe)}},5234:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isPromise=function(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}},4503:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isScheduler=function(t){return t&&"function"==typeof t.schedule}},1543:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.noop=function(){}},2052:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.not=function(t,e){function r(){return!r.pred.apply(r.thisArg,arguments)}return r.pred=t,r.thisArg=e,r}},8105:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(141);function o(t){return 0===t.length?n.identity:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}e.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)},e.pipeFromArray=o},3321:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(3196),o=r(8185),i=r(8192),s=r(3865),u=r(1112),c=r(5234),a=r(7399),l=r(8630),p=r(6079);e.subscribeTo=function(t){if(t&&"function"==typeof t[p.observable])return s.subscribeToObservable(t);if(u.isArrayLike(t))return n.subscribeToArray(t);if(c.isPromise(t))return o.subscribeToPromise(t);if(t&&"function"==typeof t[l.iterator])return i.subscribeToIterable(t);var e=a.isObject(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+e+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},3196:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.subscribeToArray=function(t){return function(e){for(var r=0,n=t.length;r<n&&!e.closed;r++)e.next(t[r]);e.complete()}}},8192:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(8630);e.subscribeToIterable=function(t){return function(e){for(var r=t[n.iterator]();;){var o=void 0;try{o=r.next()}catch(t){return e.error(t),e}if(o.done){e.complete();break}if(e.next(o.value),e.closed)break}return"function"==typeof r.return&&e.add((function(){r.return&&r.return()})),e}}},3865:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(6079);e.subscribeToObservable=function(t){return function(e){var r=t[n.observable]();if("function"!=typeof r.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return r.subscribe(e)}}},8185:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(9219);e.subscribeToPromise=function(t){return function(e){return t.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,n.hostReportError),e}}},6973:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(3848),o=r(3321),i=r(2837);e.subscribeToResult=function(t,e,r,s,u){if(void 0===u&&(u=new n.InnerSubscriber(t,r,s)),!u.closed)return e instanceof i.Observable?e.subscribe(u):o.subscribeTo(e)(u)}},3123:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(9454),o=r(3188),i=r(4556);e.toSubscriber=function(t,e,r){if(t){if(t instanceof n.Subscriber)return t;if(t[o.rxSubscriber])return t[o.rxSubscriber]()}return t||e||r?new n.Subscriber(t,e,r):new n.Subscriber(i.empty)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}(()=>{var t=r(3152),e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,r)};function n(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function o(t){return"function"==typeof t}var i=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,i=t},get useDeprecatedSynchronousErrorHandling(){return i}};function u(t){setTimeout((function(){throw t}),0)}var c={closed:!0,next:function(t){},error:function(t){if(s.useDeprecatedSynchronousErrorHandling)throw t;u(t)},complete:function(){}},a=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();var l=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),p=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e,r;if(!this.closed){var n=this,i=n._parentOrParents,s=n._ctorUnsubscribe,u=n._unsubscribe,c=n._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof t)i.remove(this);else if(null!==i)for(var p=0;p<i.length;++p)i[p].remove(this);if(o(u)){s&&(this._unsubscribe=void 0);try{u.call(this)}catch(t){e=t instanceof l?h(t.errors):[t]}}if(a(c)){p=-1;for(var f=c.length;++p<f;){var b=c[p];if(null!==(r=b)&&"object"==typeof r)try{b.unsubscribe()}catch(t){e=e||[],t instanceof l?e=e.concat(h(t.errors)):e.push(t)}}}if(e)throw new l(e)}},t.prototype.add=function(e){var r=e;if(!e)return t.EMPTY;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof t){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function h(t){return t.reduce((function(t,e){return t.concat(e instanceof l?e.errors:e)}),[])}var f=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),b=function(t){function e(r,n,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=c;break;case 1:if(!r){i.destination=c;break}if("object"==typeof r){r instanceof e?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new d(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new d(i,r,n,o)}return i}return n(e,t),e.prototype[f]=function(){return this},e.create=function(t,r,n){var o=new e(t,r,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(p),d=function(t){function e(e,r,n,i){var s,u=t.call(this)||this;u._parentSubscriber=e;var a=u;return o(r)?s=r:r&&(s=r.next,n=r.error,i=r.complete,r!==c&&(o((a=Object.create(r)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=s,u._error=n,u._complete=i,u}return n(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=s.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):u(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;u(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw t;u(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return s.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(u(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(b),y=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n.pending=!1,n}return n(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(n,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r=!1,n=void 0;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,r=e.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,r){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(p)),v=function(){function t(e,r){void 0===r&&(r=t.now),this.SchedulerAction=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(r,e)},t.now=function(){return Date.now()},t}(),_=new(function(t){function e(r,n){void 0===n&&(n=v.now);var o=t.call(this,r,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():n()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return n(e,t),e.prototype.schedule=function(r,n,o){return void 0===n&&(n=0),e.delegate&&e.delegate!==this?e.delegate.schedule(r,n,o):t.prototype.schedule.call(this,r,n,o)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var r;this.active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(v))(y),m={leading:!0,trailing:!1};function O(t,e,r){return void 0===e&&(e=_),void 0===r&&(r=m),function(n){return n.lift(new S(t,e,r.leading,r.trailing))}}var w,S=function(){function t(t,e,r,n){this.duration=t,this.scheduler=e,this.leading=r,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new g(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),g=function(t){function e(e,r,n,o,i){var s=t.call(this,e)||this;return s.duration=r,s.scheduler=n,s.leading=o,s.trailing=i,s._hasTrailingValue=!1,s._trailingValue=null,s}return n(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(j,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(b);function j(t){t.subscriber.clearThrottle()}!function(t){t[t.passiveTimed=0]="passiveTimed",t[t.passiveAccumulative=1]="passiveAccumulative",t[t.activeOnClick=2]="activeOnClick",t[t.activeOnClickMain=3]="activeOnClickMain"}(w||(w={}));class x{constructor(t,e,r,n,o){this.name=t,this.description=e,this.level=0,this.amount=r,this.cost=n,this.type=o}levelUp(t){return this.cost>t.cookieAmount?-1:(t.cookieAmount-=this.cost,t.emitCurrentNumberOfCookies(),this.cost+=Math.round(.8*this.cost),this.level++,this.amount=Math.round(.6*this.amount),this.startUpgrade(),t.pushObservable(this.observable,this.type,this.amount,this.level),1)}startUpgrade(){switch(this.type){case w.passiveTimed:this.observable=(0,t.FG)(1e3).pipe(O(3e3-100*this.level));break;case w.passiveAccumulative:this.observable=(0,t.RB)(document.querySelector(".Cookie"),"click");break;case w.activeOnClick:this.observable=(0,t.RB)(document.querySelector(".Cookie"),"click").pipe(O(5e3-100*this.level))}}}const E=new x("Rolling pin","Get a bonus amount of cookies every set amount of seconds",1,10,w.passiveTimed),P=new x("A helping hand","Once every five seconds when clicking on a cookie you get a bonus one",1,15,w.activeOnClick),A=new x("Luck of the baker","Each click has a small chance of getting you a bonus cookie",1,30,w.passiveAccumulative);[E,P,A].map((t=>t.observable));const M=new class{constructor(){this.cookieAmount=0,this.observablesArray=[],this.cookieCountObservable=new t.xQ}emitCurrentNumberOfCookies(){this.cookieCountObservable.next(this.cookieAmount)}pushObservable(t,e,r,n){this.observablesArray.push(t),t.subscribe((t=>{switch(e){case w.passiveAccumulative:10*Math.random()+.1*n>8&&(this.cookieAmount+=1);break;case w.passiveTimed:this.cookieAmount+=1;break;case w.activeOnClick:this.cookieAmount+=r}this.emitCurrentNumberOfCookies()}))}},T=new class{constructor(t){this.mainCookie=new x("The main one","Get a cookie each time you click",1,30,w.activeOnClickMain),this.player=t,this.upgrades=[],this.playerCookieAmountListener=t.cookieCountObservable}addUpgrade(t){this.upgrades.push(t)}draw(e){const r=document.createElement("div");r.className="CookieClicker",e.appendChild(r);const n=document.createElement("div");n.className="Upgrades",r.appendChild(n);const o=document.createElement("div");o.className="CookieContainer",r.appendChild(o);const i=document.createElement("button");i.title=this.mainCookie.description,i.className="Cookie",(0,t.RB)(i,"click").subscribe((()=>{this.player.cookieAmount+=1,console.log(this.player.cookieAmount),this.player.emitCurrentNumberOfCookies()})),o.appendChild(i);const s=document.createElement("label");s.className="CookieAmount",o.appendChild(s),s.innerHTML=this.player.cookieAmount.toString(),this.upgrades.forEach((e=>{const r=document.createElement("button");r.className="Upgrade",r.innerHTML=`${e.name} ${e.level}\nCost: ${e.cost}`,r.title=e.description,r.disabled=!0,n.appendChild(r),(0,t.RB)(r,"click").subscribe((t=>{e.levelUp(this.player),r.innerHTML=`${e.name} ${e.level}\nCost: ${e.cost}`}))}));const u=document.querySelectorAll(".Upgrade");this.playerCookieAmountListener.subscribe((t=>{u.forEach(((e,r)=>{this.upgrades[r].cost<t?e.disabled=!1:e.disabled=!0})),document.querySelector(".CookieAmount").innerHTML=t.toString()}))}}(M);T.addUpgrade(E),T.addUpgrade(P),T.addUpgrade(A),T.draw(document.body)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,