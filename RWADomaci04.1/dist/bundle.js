(()=>{"use strict";var n=function(n,e,t,r){return new(t||(t=Promise))((function(o,a){function c(n){try{l(r.next(n))}catch(n){a(n)}}function i(n){try{l(r.throw(n))}catch(n){a(n)}}function l(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,i)}l((r=r.apply(n,e||[])).next())}))},e=function(n,e){var t,r,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;c;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return c.label++,{value:a[1],done:!1};case 5:c.label++,r=a[1],a=[0];continue;case 7:a=c.ops.pop(),c.trys.pop();continue;default:if(!((o=(o=c.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){c=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){c.label=a[1];break}if(6===a[0]&&c.label<o[1]){c.label=o[1],o=a;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(a);break}o[2]&&c.ops.pop(),c.trys.pop();continue}a=e.call(n,c)}catch(n){a=[6,n],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}};function t(t){return n(this,void 0,void 0,(function(){return e(this,(function(n){return[2,fetch("http://localhost:3000/clubs/"+t).then((function(n){if(n.ok)return n.json();throw new Error("Not found")})).catch((function(n){return console.log(n)}))]}))}))}new(function(){function r(n){if(!n)throw new Error("Host is null!");this.container=document.createElement("div"),n.appendChild(this.container),this.container.className="container"}return r.prototype.draw=function(){this.drawSearchBarMatches(this.container),this.drawAllMatches(this.container),this.drawSearchBarClubs(this.container),this.drawAllClubs(this.container)},r.prototype.drawAllMatches=function(t){var r=this,o=document.createElement("div");t.appendChild(o),o.className="allMatches",function(){return n(this,void 0,void 0,(function(){return e(this,(function(n){return[2,fetch("http://localhost:3000/matches").then((function(n){if(n.ok)return n.json();throw new Error("Bad request!")})).catch((function(n){console.log(n)}))]}))}))}().then((function(n){n.forEach((function(n){return r.drawIndividualMatch(o,n)}))})).catch((function(n){console.log(n)}))},r.prototype.drawIndividualMatch=function(n,e){return r=this,o=void 0,c=function(){var r,o;return function(n,e){var t,r,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;c;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return c.label++,{value:a[1],done:!1};case 5:c.label++,r=a[1],a=[0];continue;case 7:a=c.ops.pop(),c.trys.pop();continue;default:if(!((o=(o=c.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){c=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){c.label=a[1];break}if(6===a[0]&&c.label<o[1]){c.label=o[1],o=a;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(a);break}o[2]&&c.ops.pop(),c.trys.pop();continue}a=e.call(n,c)}catch(n){a=[6,n],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}(this,(function(a){switch(a.label){case 0:return(r=document.createElement("div")).className="matchContainer",n.appendChild(r),[4,t(e.homeId).then((function(n){o=document.createElement("div"),r.appendChild(o),o.innerHTML=n.name})).catch((function(n){console.log(n)}))];case 1:return a.sent(),o=document.createElement("div"),r.appendChild(o),o.innerHTML=e.score,[4,t(e.awayId).then((function(n){o=document.createElement("div"),r.appendChild(o),o.innerHTML=n.name})).catch((function(n){console.log(n)}))];case 2:return a.sent(),[2]}}))},new((a=void 0)||(a=Promise))((function(n,e){function t(n){try{l(c.next(n))}catch(n){e(n)}}function i(n){try{l(c.throw(n))}catch(n){e(n)}}function l(e){var r;e.done?n(e.value):(r=e.value,r instanceof a?r:new a((function(n){n(r)}))).then(t,i)}l((c=c.apply(r,o||[])).next())}));var r,o,a,c},r.prototype.drawAllClubs=function(t){var r=document.createElement("div");t.appendChild(r),r.className="allClubsContainer",function(){return n(this,void 0,void 0,(function(){return e(this,(function(n){return[2,fetch("http://localhost:3000/clubs").then((function(n){if(n.ok)return n.json();throw new Error("Not found")})).catch((function(n){return console.log(n)}))]}))}))}().then((function(n){n.forEach((function(n){var e=document.createElement("div");t.appendChild(e),e.className="clubContainer";var r=document.createElement("div");e.appendChild(r),r.className="clubAttribute",r.innerHTML=n.name,r=document.createElement("div"),e.appendChild(r),r.className="clubAttribute",r.innerHTML=n.city}))})).catch((function(n){console.log(n)}))},r.prototype.drawSearchBarMatches=function(n){var e=document.createElement("div");n.appendChild(e),e.className="searchBarMatches";var t=document.createElement("label");t.innerHTML="Ime kluba: ",e.appendChild(t);var r=document.createElement("input");r.className="searchMatches",e.appendChild(r)},r.prototype.drawSearchBarClubs=function(n){var e=document.createElement("div");n.appendChild(e),e.className="searchBarClubs";var t=document.createElement("label");t.innerHTML="Ime grada: ",e.appendChild(t);var r=document.createElement("input");r.className="searchClubs",e.appendChild(r)},r}())(document.body).draw()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,