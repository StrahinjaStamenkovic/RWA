/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};function n(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(t,n){for(var e=0,r=n.length,o=t.length;e<r;e++,o++)t[o]=n[e];return t}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||a(t,n)}))})}function a(t,n){try{(e=o[t](n)).value instanceof u?Promise.resolve(e.value.v).then(s,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function s(t){a("next",t)}function l(t){a("throw",t)}function f(t,n){t(n),i.shift(),i.length&&a(i[0][0],i[0][1])}}function a(t){return"function"==typeof t}Object.create,Object.create;var s,l=((s=function(t){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(Array.isArray(s))try{for(var f=r(s),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(n){t={error:n}}finally{try{h&&!h.done&&(n=f.return)&&n.call(f)}finally{if(t)throw t.error}}else null==s||s.remove(this);var d=this.initialTeardown;if(a(d))try{d()}catch(t){c=t instanceof l?t.errors:[t]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=r(v),b=y.next();!b.done;b=y.next()){var w=b.value;try{p(w)}catch(t){c=null!=c?c:[],t instanceof l?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){e={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(e)throw e.error}}}if(c)throw new l(c)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)p(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&f(n,t)},t.prototype.remove=function(n){var e=this._teardowns;e&&f(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}();function d(t){return t instanceof h||t&&"closed"in t&&a(t.remove)&&a(t.add)&&a(t.unsubscribe)}function p(t){a(t)?t():t.unsubscribe()}h.EMPTY;var v=null,y=null,b=void 0,w=!1,m=!1,g={setTimeout:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=g.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,i([],o(t)))},clearTimeout:function(t){var n=g.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function _(t){g.setTimeout((function(){if(!v)throw t;v(t)}))}function x(){}var E=S("C",void 0,void 0);function S(t,n,e){return{kind:t,value:n,error:e}}var C=function(t){function e(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,d(n)&&n.add(e)):e.destination=P,e}return n(e,t),e.create=function(t,n,e){return new k(t,n,e)},e.prototype.next=function(t){this.isStopped?A(function(t){return S("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?A(S("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?A(E,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(h),k=function(t){function e(n,e,r){var o,i=t.call(this)||this;if(a(n))o=n;else if(n){var u;o=n.next,e=n.error,r=n.complete,i&&m?(u=Object.create(n)).unsubscribe=function(){return i.unsubscribe()}:u=n,o=null==o?void 0:o.bind(u),e=null==e?void 0:e.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?I(o,i):x,error:I(null!=e?e:T,i),complete:r?I(r,i):x},i}return n(e,t),e}(C);function I(t,n){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{t.apply(void 0,i([],o(e)))}catch(t){if(w){if(!n._syncErrorHack_isSubscribing)throw t;n.__syncError=t}else _(t)}}}function T(t){throw t}function A(t,n){var e=y;e&&g.setTimeout((function(){return e(t,n)}))}var P={closed:!0,next:x,error:T,complete:x},M="function"==typeof Symbol&&Symbol.observable||"@@observable";function N(t){return t}function j(t){return 0===t.length?N:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var L=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=(r=t)&&r instanceof C||function(t){return t&&a(t.next)&&a(t.error)&&a(t.complete)}(r)&&d(r)?t:new k(t,n,e);if(w)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},t.prototype._deprecatedSyncErrorSubscribe=function(t){var n=t;n._syncErrorHack_isSubscribing=!0;var e=this.operator;if(e)t.add(e.call(t,this.source));else try{this._subscribe(t)}catch(t){n.__syncError=t}for(var r=n;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}n._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=O(n))((function(n,r){var o;o=e.subscribe((function(n){try{t(n)}catch(t){r(t),null==o||o.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[M]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t.length?j(t)(this):this},t.prototype.toPromise=function(t){var n=this;return new(t=O(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function O(t){var n;return null!==(n=null!=t?t:b)&&void 0!==n?n:Promise}function H(t){return function(n){if(function(t){return a(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var B=function(t){function e(n,e,r,o,i){var u=t.call(this,n)||this;return u.onFinalize=i,u._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(e,t),e.prototype.unsubscribe=function(){var n,e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))},e}(C);function q(t,n){return H((function(e,r){var o=0;e.subscribe(new B(r,(function(e){r.next(t.call(n,e,o++))})))}))}var G=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Y(t){return a(null==t?void 0:t.then)}function R(t,n){return new L((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}var z="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function F(t,n){if(!t)throw new Error("Iterable cannot be null");return new L((function(e){var r=new h;return r.add(n.schedule((function(){var o=t[Symbol.asyncIterator]();r.add(n.schedule((function(){var t=this;o.next().then((function(n){n.done?e.complete():(e.next(n.value),t.schedule())}))})))}))),r}))}function U(t){return a(t[M])}function D(t){return a(null==t?void 0:t[z])}function J(t){return Symbol.asyncIterator&&a(null==t?void 0:t[Symbol.asyncIterator])}function K(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function Q(t){return c(this,arguments,(function(){var n,r,o;return e(this,(function(e){switch(e.label){case 0:n=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(n.read())];case 3:return r=e.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function V(t){return a(null==t?void 0:t.getReader)}function W(t,n){return n?function(t,n){if(null!=t){if(U(t))return function(t,n){return new L((function(e){var r=new h;return r.add(n.schedule((function(){var o=t[M]();r.add(o.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(G(t))return R(t,n);if(Y(t))return function(t,n){return new L((function(e){return n.schedule((function(){return t.then((function(t){e.add(n.schedule((function(){e.next(t),e.add(n.schedule((function(){return e.complete()})))})))}),(function(t){e.add(n.schedule((function(){return e.error(t)})))}))}))}))}(t,n);if(J(t))return F(t,n);if(D(t))return function(t,n){return new L((function(e){var r;return e.add(n.schedule((function(){r=t[z](),function(t,n,e,r){void 0===r&&(r=0);var o=n.schedule((function(){try{e.call(this)}catch(n){t.error(n)}}),r);t.add(o)}(e,n,(function(){var t=r.next(),n=t.value;t.done?e.complete():(e.next(n),this.schedule())}))}))),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(V(t))return function(t,n){return F(Q(t),n)}(t,n)}throw K(t)}(t,n):X(t)}function X(t){if(t instanceof L)return t;if(null!=t){if(U(t))return o=t,new L((function(t){var n=o[M]();if(a(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(G(t))return Z(t);if(Y(t))return e=t,new L((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,_)}));if(J(t))return $(t);if(D(t))return n=t,new L((function(t){var e,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}t.complete()}));if(V(t))return $(Q(t))}var n,e,o;throw K(t)}function Z(t){return new L((function(n){for(var e=0;e<t.length&&!n.closed;e++)n.next(t[e]);n.complete()}))}function $(t){return new L((function(n){(function(t,n){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=r(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(a=i.value,n.next(a),n.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=e.sent(),u={error:s},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(f.next(t))}catch(t){n(t)}}function r(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((f=f.apply(a,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function tt(t,n,e){return void 0===e&&(e=1/0),a(n)?tt((function(e,r){return q((function(t,o){return n(e,t,r,o)}))(X(t(e,r)))}),e):("number"==typeof n&&(e=n),H((function(n,r){return function(t,n,e,r,o,i,u,c){var a=[],s=0,l=0,f=!1,h=function(){!f||a.length||s||n.complete()},d=function(t){return s<r?p(t):a.push(t)},p=function(t){s++;var o=!1;X(e(t,l++)).subscribe(new B(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)t=void 0,t=a.shift(),p(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(new B(n,d,(function(){f=!0,h()}))),function(){}}(n,r,t,e)})))}var nt=Array.isArray;var et=["addListener","removeListener"],rt=["addEventListener","removeEventListener"],ot=["on","off"];function it(t,n,e,r){if(a(e)&&(r=e,e=void 0),r)return it(t,n,e).pipe((u=r,q((function(t){return function(t,n){return nt(n)?t.apply(void 0,i([],o(n))):t(n)}(u,t)}))));var u,c=o(function(t){return a(t.addEventListener)&&a(t.removeEventListener)}(t)?rt.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return a(t.addListener)&&a(t.removeListener)}(t)?et.map(ut(t,n)):function(t){return a(t.on)&&a(t.off)}(t)?ot.map(ut(t,n)):[],2),s=c[0],l=c[1];if(!s&&G(t))return tt((function(t){return it(t,n,e)}))(Z(t));if(!s)throw new TypeError("Invalid event target");return new L((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return s(n),function(){return l(n)}}))}function ut(t,n){return function(e){return function(r){return t[e](n,r)}}}var ct=function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(h),at={setInterval:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=at.delegate;return((null==e?void 0:e.setInterval)||setInterval).apply(void 0,i([],o(t)))},clearInterval:function(t){var n=at.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},st=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),at.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;at.clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(ct),lt={now:function(){return(lt.delegate||Date).now()},delegate:void 0},ft=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=lt.now,t}(),ht=new(function(t){function e(n,e){void 0===e&&(e=ft.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return n(e,t),e.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(ft))(st);function dt(t,n){return void 0===n&&(n=ht),H((function(e,r){var o=null,i=null,u=null,c=function(){if(o){o.unsubscribe(),o=null;var t=i;i=null,r.next(t)}};function a(){var e=u+t,r=n.now();r<e?o=this.schedule(void 0,e-r):c()}e.subscribe(new B(r,(function(e){i=e,u=n.now(),o||(o=n.schedule(a,t))}),(function(){c(),r.complete()}),void 0,(function(){i=o=null})))}))}function pt(t,n){return H((function(e,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};e.subscribe(new B(r,(function(e){null==o||o.unsubscribe();var u=0,a=i++;X(t(e,a)).subscribe(o=new B(r,(function(t){return r.next(n?n(e,t,a,u++):t)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}var vt=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}))},yt=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};function bt(){return vt(this,void 0,void 0,(function(){return yt(this,(function(t){return[2,fetch("http://localhost:3000/matches").then((function(t){if(t.ok)return t.json();throw new Error("Bad request!")})).catch((function(t){console.log(t)}))]}))}))}function wt(){return vt(this,void 0,void 0,(function(){return yt(this,(function(t){return[2,fetch("http://localhost:3000/clubs").then((function(t){if(t.ok)return t.json();throw new Error("Not found")})).catch((function(t){return console.log(t)}))]}))}))}function mt(t){return vt(this,void 0,void 0,(function(){return yt(this,(function(n){return[2,fetch("http://localhost:3000/clubs/"+t).then((function(t){if(t.ok)return t.json();throw new Error("Not found")})).catch((function(t){return console.log(t)}))]}))}))}function gt(t){return vt(this,void 0,void 0,(function(){return yt(this,(function(n){return[2,fetch("http://localhost:3000/clubs?city="+t).then((function(t){if(t.ok)return t.json();throw new Error("Not found")})).catch((function(t){return console.log(t)}))]}))}))}function _t(t){return vt(this,void 0,void 0,(function(){return yt(this,(function(n){return[2,fetch("http://localhost:3000/clubs?name="+t).then((function(t){if(t.ok)return t.json();throw new Error("Not found")})).catch((function(t){return console.log(t)}))]}))}))}function xt(t){return vt(this,void 0,void 0,(function(){return yt(this,(function(n){return[2,fetch("http://localhost:3000/clubs?homeId="+t).then((function(t){if(t.ok)return t.json();throw new Error("Not found")})).catch((function(t){return console.log(t)}))]}))}))}function Et(t){return vt(this,void 0,void 0,(function(){return yt(this,(function(n){return[2,fetch("http://localhost:3000/clubs?awayId="+t).then((function(t){if(t.ok)return t.json();throw new Error("Not found")})).catch((function(t){return console.log(t)}))]}))}))}function St(t){return vt(this,void 0,void 0,(function(){var n,e,r;return yt(this,(function(o){switch(o.label){case 0:return[4,xt(t)];case 1:return n=o.sent(),r=(e=n).concat,[4,Et(t)];case 2:return r.apply(e,[o.sent()]),[2,n]}}))}))}var Ct=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}))},kt=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};var It=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}))},Tt=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};new(function(){function t(t){if(!t)throw new Error("Host is null!");this.container=document.createElement("div"),t.appendChild(this.container),this.container.className="container"}return t.prototype.draw=function(){return It(this,void 0,void 0,(function(){var t,n,e,r,o,i;return Tt(this,(function(u){switch(u.label){case 0:return this.drawSearchBarMatches(this.container),t=document.createElement("div"),this.container.appendChild(t),t.className="allMatches",n=this.drawAllMatches,e=[t],[4,bt()];case 1:return n.apply(this,e.concat([u.sent()])),this.drawSearchBarClubs(this.container),r=document.createElement("div"),this.container.appendChild(r),r.className="allClubsContainer",o=this.drawAllClubs,i=[r],[4,wt()];case 2:return o.apply(this,i.concat([u.sent()])),this.generateSubscribers(),[2]}}))}))},t.prototype.generateSubscribers=function(){var t=this;(function(){var t=this;return it(document.querySelector(".searchBarMatches"),"input").pipe(dt(500),q((function(t){return t.target.value}))).pipe(pt((function(n){return Ct(t,void 0,void 0,(function(){var t,e,r,o=this;return kt(this,(function(i){switch(i.label){case 0:return""!==n?[3,2]:[4,bt()];case 1:return[2,i.sent()];case 2:return[4,_t(n)];case 3:return t=i.sent(),e=t.map((function(t){return t.id})),r=new Array,e.forEach((function(t){return Ct(o,void 0,void 0,(function(){var n,e;return kt(this,(function(o){switch(o.label){case 0:return e=(n=r).concat,[4,St(t)];case 1:return r=e.apply(n,[o.sent()]),[2]}}))}))})),[2,W(r)]}}))}))})))})().subscribe((function(n){t.drawAllMatches(document.querySelector(".allMatches"),n)})),function(){var t=this;return it(document.querySelector(".searchBarClubs"),"input").pipe(dt(1e3),q((function(t){return t.target.value}))).pipe(pt((function(n){return Ct(t,void 0,void 0,(function(){var t,e;return kt(this,(function(r){switch(r.label){case 0:return""!==n?[3,2]:(t=W,[4,wt()]);case 1:return[2,t.apply(void 0,[r.sent()])];case 2:return e=W,[4,gt(n)];case 3:return[2,e.apply(void 0,[r.sent()])]}}))}))})))}().subscribe((function(n){t.drawAllClubs(document.querySelector(".allClubsContainer"),n)}))},t.prototype.drawAllMatches=function(t,n){var e=this;this.removeChildren(t),n.forEach((function(n){var r=document.createElement("div");r.className="matchContainer",t.appendChild(r),e.drawIndividualMatch(r,n)}))},t.prototype.drawIndividualMatch=function(t,n){return It(this,void 0,void 0,(function(){var e;return Tt(this,(function(r){switch(r.label){case 0:return[4,mt(n.homeId).then((function(n){e=document.createElement("div"),t.appendChild(e),e.innerHTML=n.name})).catch((function(t){console.log(t)}))];case 1:return r.sent(),e=document.createElement("div"),t.appendChild(e),e.innerHTML=n.score,[4,mt(n.awayId).then((function(n){e=document.createElement("div"),t.appendChild(e),e.innerHTML=n.name})).catch((function(t){console.log(t)}))];case 2:return r.sent(),[2]}}))}))},t.prototype.drawAllClubs=function(t,n){this.removeChildren(t),n.forEach((function(n){var e=document.createElement("div");t.appendChild(e),e.className="clubContainer";var r=document.createElement("div");e.appendChild(r),r.className="clubAttribute",r.innerHTML=n.name,r=document.createElement("div"),e.appendChild(r),r.className="clubAttribute",r.innerHTML=n.city}))},t.prototype.drawSearchBarMatches=function(t){var n=document.createElement("div");t.appendChild(n),n.className="searchBarMatches";var e=document.createElement("label");e.innerHTML="Ime kluba: ",n.appendChild(e);var r=document.createElement("input");r.className="searchMatches",n.appendChild(r)},t.prototype.drawSearchBarClubs=function(t){var n=document.createElement("div");t.appendChild(n),n.className="searchBarClubs";var e=document.createElement("label");e.innerHTML="Ime grada: ",n.appendChild(e);var r=document.createElement("input");r.className="searchClubs",n.appendChild(r)},t.prototype.removeChildren=function(t){for(;t.hasChildNodes();)t.removeChild(t.childNodes[0])},t}())(document.body).draw()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,