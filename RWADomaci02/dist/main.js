(()=>{"use strict";var e;!function(e){e[e.stopped=0]="stopped",e[e.running=1]="running"}(e||(e={}));const t=new class{constructor(e){this.name=e,this.score=0,this.topScore=0,this.lives=3}evaluateTopScore(){0==this.lives&&this.score>=this.topScore&&(this.topScore=this.score)}increaseScore(e){this.score+=e}reset(){this.lives=3,this.score=0}}("Strahinja"),s=new class{constructor(t,s,i,a){this.size=t,this.tiles=new Array,this.difficulty=s,this.speed=i,this.player=a,this.currentLevel=1,this.gameState=e.stopped,this.currentTile=0}evaluate(e){return this.tiles[this.currentTile]!==e?(this.player.lives--,this.currentTile=0,0===this.player.lives?(this.end(),-2):-1):(this.currentTile++,this.player.increaseScore(5),this.currentTile===this.currentLevel?(this.nextRound(),1):0)}generateARandomTile(){const e=Math.round(Math.random()*this.size*this.size)%(this.size*this.size);return this.tiles.push(e),this.tiles}start(){if(this.gameState===e.stopped)return this.reset(),this.gameState=e.running,this.generateARandomTile()}reset(){this.tiles=new Array,this.player.reset()}nextRound(){this.currentLevel++,this.currentTile=0,this.generateARandomTile()}end(){this.player.evaluateTopScore(),this.reset()}}(3,10,5,t);new class{constructor(e,t){this.model=t,this.container=e}draw(){for(let e=0;e<this.model.size;e++){const t=document.createElement("div");t.className="Row",this.container.appendChild(t);for(let s=0;s<this.model.size;s++){const i=document.createElement("button");i.className="Tile",i.id=`Button${e*this.model.size+s}`,i.onclick=async()=>{this.evaluate(i,e*this.model.size+s)},t.appendChild(i)}}const e=document.createElement("button");e.innerHTML="Start",e.className="Start",e.onclick=()=>{e.disabled=!0,this.interactableTiles("true"),this.initiateGame()},this.container.appendChild(e);const t=document.createElement("div");t.className="PlayerInfo";const s=document.createElement("label");s.innerHTML=this.model.player.name,s.className="PlayerName",t.appendChild(s);const i=document.createElement("label");i.innerHTML=this.model.player.score.toString(),i.className="PlayerScore",t.appendChild(i);const a=document.createElement("label");a.innerHTML=this.model.player.topScore.toString(),a.className="PlayerTopScore",t.appendChild(a);const l=document.createElement("label");l.innerHTML=this.model.player.lives.toString(),l.className="PlayerLives",t.appendChild(l),this.container.appendChild(t)}async sleep(e){return new Promise((t=>setTimeout(t,e)))}async initiateGame(){const e=this.model.start();console.log(e),await this.sleep(1e3),e.forEach((async e=>{await this.showTile(document.getElementById(`Button${e}`))}))}async showTile(e){return new Promise(((t,s)=>{e.classList.add("ActiveTile"),setTimeout((async()=>{e.classList.remove("ActiveTile"),await this.sleep(500),t(null)}),500)}))}async evaluate(e,t){switch(await this.showTile(e),this.model.evaluate(t)){case-2:document.querySelector(".Start").setAttribute("enabled","true"),this.interactableTiles("false");case-1:await this.levelNotCleared(),await this.displayPattern();break;case 0:break;case 1:await this.levelCleared(),await this.displayPattern()}this.updatePlayerInfo()}async displayPattern(){const e=this.model.tiles;console.log(e),await this.sleep(2e3);for(const t of e)await this.showTile(document.getElementById(`Button${t}`))}interactableTiles(e){document.querySelectorAll(".Tile").forEach((t=>t.setAttribute("enabled",e)))}updatePlayerInfo(){document.querySelector(".PlayerScore").innerHTML=this.model.player.score.toString(),document.querySelector(".PlayerTopScore").innerHTML=this.model.player.topScore.toString(),document.querySelector(".PlayerLives").innerHTML=this.model.player.lives.toString()}async levelCleared(){await this.sleep(500);const e=document.querySelectorAll(".Tile");e.forEach((e=>e.classList.add("Cleared"))),await this.sleep(1e3),e.forEach((e=>e.classList.remove("Cleared")))}async levelNotCleared(){await this.sleep(500);const e=document.querySelectorAll(".Tile");e.forEach((e=>e.classList.add("NotCleared"))),await this.sleep(1e3),e.forEach((e=>e.classList.remove("NotCleared")))}}(document.body,s).draw(),console.log("succ")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,